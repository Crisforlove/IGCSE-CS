{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IGCSE \u5b66\u4e60\u5168\u653b\u7565 \u5f85\u5b8c\u5584","text":"<p>\u540e\u7eed\u8865\u5145\uff1a</p> <ol> <li>\u5b8c\u558410\u7ae0\u8282\u5185\u5bb9\uff08\u57fa\u7840\u77e5\u8bc6+\u4f8b\u9898+\u56fe\u7247\u4e3e\u4f8b\uff09</li> <li>\u7d22\u5f15\u529f\u80fd\u5b8c\u5584\uff0c\u540e\u7eed\u94fe\u63a5\u5230\u6211\u4eec\u7684\u5fae\u4fe1\u516c\u4f17\u53f7\u6587\u7ae0\u548c\u89c6\u9891</li> <li>\u6848\u4f8b\u6301\u7eed\u4e30\u5bcc\uff0c\u5982\u4e00\u4e9b\u4e8c\u8fdb\u5236\u6e38\u620f\uff0c\u4e4b\u524d\u7684python\u5c55\u793a\u4ee3\u7801\uff0c\u540e\u7eed\u53ef\u4ee5\u4ee5\u94fe\u63a5\u6216\u8005\u7f51\u9875\u5c55\u793a\u7684\u5f62\u5f0f\u6765\u5e2e\u52a9\u5b66\u751f\u66f4\u597d\u7684\u7406\u89e3\u77e5\u8bc6\u70b9\u6982\u5ff5</li> <li>\u9898\u76ee\u7ec3\u4e60\u5b8c\u5584\uff0c\u540e\u7eed\u4e13\u9898\u8bad\u7ec3\u7b49\u7b49</li> <li>\u6301\u7eed\u8865\u5145ing</li> </ol> <p>\u76ee\u524d\u77e5\u8bc6\u70b9\u8865\u5145\u987a\u5e8f\u4e3a8-10\uff0c1-6\uff0c9</p> <p>\u5df2\u7ecf\u6709\u7684\u8d44\u6e90\uff1a</p> <ol> <li>\u80cc\u8bf5\u8bb0\u5fc6\u77e5\u8bc6\u70b9\uff0c\u8003\u5bdf\u5b66\u751f\u8bb0\u5fc6\u6027\u7684\u5185\u5bb9\uff0cpdf/docx\u7248</li> <li>\u4e13\u9898\u8bad\u7ec3chp 9\u548cchp 10\u7684\u90e8\u5206\uff0c\u76ee\u524d\u4ec5\u4e3adocx\u622a\u56fe\u683c\u5f0f\u548cpdf\u683c\u5f0f\uff0c\u540e\u7eed\u770b\u80fd\u4e0d\u80fd\u8f6c\u6210\u7f51\u9875\u7aef\u53ef\u5728\u7ebf\u7ec3\u4e60\u7684\u5176\u4ed6\u683c\u5f0f</li> </ol>"},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.1%20WHY%20COMPUTERS%20USE%20BINARY/","title":"1.1.1 WHY COMPUTERS USE BINARY","text":""},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.1%20WHY%20COMPUTERS%20USE%20BINARY/#111-why-computers-use-binary","title":"1.1.1 WHY COMPUTERS USE BINARY","text":"<p>OBJECTIVES \u200b\u200b1.1.1 Understand how and why computers use binary to represent all forms of data.</p> <ul> <li>Any form of data needs to be converted to binary to be processed by a computer</li> <li>Data is processed using logic gates and stored in registers</li> </ul> <p>Whilst computer are complex machines that are capable of a countless number of functions at an incomprehensible speed, when they are broken down to their most simple form, they are little more complex than a light switch. Imagine if you had just two light switches and represented a letter with each combination of the switch settings, you could represent 4 different letters.</p> <p></p> <p>When you press a key on your keyboard an electrical signal is sent to your computer and converted to a binary representation, a combination of switches being on or off. To make it easy for visual representation we represent the OFF state with zeros and the ON state with ones. For example, when you press the letter A on your keyboard the electrical signal is converted and stored as 01000001, the letter B is stored as 01000010.</p> <p>Whilst at its core the computer is no more complicated than a light switch, when you combine billions of light switches with the hundreds of thousands of components that create your computer, impressive things can be done.</p> <p>Every keystroke, pixel on your screen, image you upload, sound played by your computer is all converted to a binary representation to be stored and processed on your computer.</p> <p>Every process your computer does can be broken down to its binary representation, the processor can process billions of operations per second and each binary value is stored in a very fast and very small section of memory called a register whilst it is waiting to be processed.</p> <p>TERMINOLOGY</p> <p>Binary: A number system that uses only two digits, 0 and 1. Logic Gates: Electronic circuits that perform basic logic functions such as AND, OR, and NOT. Registers: Small, fast storage locations in a computer's CPU that hold data temporarily during processing.</p> <p>QUESTIONS</p> <p>1: What is the main reason why computers use binary to represent data?</p> <p>A) It is the most efficient way</p> <p>B) It is the easiest way</p> <p>C) It is the only way</p> <p>D) It is the most convenient way</p> <p>2: How does binary representation of data allow computers to perform calculations and logical operations?</p> <p>A) By using specific arithmetic circuits</p> <p>B) By using specific logic circuits</p> <p>C) By using specific memory circuits</p> <p>D) By using specific input/output circuits</p> <p>3: What are the limitations of using binary to represent data in computers?</p> <p>A) It can only represent whole numbers</p> <p>B) It is limited by memory size</p> <p>C) It is limited by processing speed</p> <p>D) All of the above</p> <p>4: What is the relationship between binary representation of data and the hardware of a computer?</p> <p>A) The hardware is designed to work with binary data</p> <p>B) The hardware is limited by binary data representation</p> <p>C) The hardware has no relationship with binary data representation</p> <p>D) The hardware can be designed to work with data represented in other forms besides binary</p>"},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.2%20BINARY%2C%20HEX%20AND%20CONVERTIG%20BETWEEN%20NUMBER%20SYSTEMS/","title":"1.1.2 BINARY, HEX AND CONVERTIG BETWEEN NUMBER SYSTEMS","text":""},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.2%20BINARY%2C%20HEX%20AND%20CONVERTIG%20BETWEEN%20NUMBER%20SYSTEMS/#112-binary-hex-and-convertig-between-number-systems","title":"1.1.2 BINARY, HEX AND CONVERTIG BETWEEN NUMBER SYSTEMS","text":"<p>OBJECTIVES 1.1.2 (a) Understand the denary, binary and hexadecimal number systems</p> <p>\u2022 Denary is a base 10 system</p> <p>\u2022 Binary is a base 2 system</p> <p>\u2022 Hexadecimal is a base 16 system</p> <p>1.1.2(b) Convert between (i) positive denary and positive binary (ii) positive denary and positive hexadecimal (iii) positive hexadecimal and positive binary</p> <p>\u2022 Values used will be integers only</p> <p>\u2022 Conversions in both directions, e.g. denary to binary or binary to denary</p> <p>\u2022 Maximum binary number length of 16-bit</p> <p>Understanding different number systems is crucial in computer science. This section covers the basics of denary, binary, and hexadecimal systems. Denary, or decimal, is the base 10 system we use daily. Binary is the base 2 system, essential for computer operations, using only digits 0 and 1. Hexadecimal is a base 16 system, utilising digits 0-9 and letters A-F. You'll learn to convert between positive denary and binary, denary and hexadecimal, and hexadecimal and binary, focusing on integer values and a maximum 16-bit binary length.</p> <p>Denary System (Base 10)</p> <ul> <li>Denary, or decimal, is our everyday number system.</li> <li>It uses 10 digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9.</li> <li>Each digit's position represents a power of 10.</li> </ul> <p>Binary System (Base 2)</p> <ul> <li>Binary is used in computers and digital systems.</li> <li>It uses only two digits: 0 and 1.</li> <li>Each digit's position represents a power of 2.</li> </ul> <p>Hexadecimal System (Base 16)</p> <ul> <li>Hexadecimal is often used in computing where compact representation is needed.</li> <li>It uses 16 symbols: 0-9 and A-F (where A=10, B=11, ..., F=15).</li> <li>Each digit's position represents a power of 16.</li> </ul>"},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.2%20BINARY%2C%20HEX%20AND%20CONVERTIG%20BETWEEN%20NUMBER%20SYSTEMS/#section-1-binary-numbers","title":"SECTION 1 | BINARY NUMBERS","text":"<p>The number system we all know has Units, Tens, Hundreds, Thousands and so on, we call this traditional number system the Denary number system. The binary number system is different, it has 1s, 2s, 4s, 8s, 16s, 32s and so on. The denery number system is the system you learn in maths and is a base 10 system, the Binary system however, is a base 2 system, this means in Binary that only one of two possible values can go in each column heading, a zero or a one. These ones and zeros are called BITs. </p> <p></p> <p>Like in traditional math if you take the value from each column and multiply it by the column header you get the total value of the number. In the example above, to the left we have (1 x 32) + (1 x 8) + (1 x 4) = 44</p> <p>So Binary 00101100 is equivalent to Denary 44 Note: If the right most (the least significant) binary digit is a 1 then binary value must be representing an odd number.</p> <p>Eight BITs make a Byte, for example 10101010 is a byte. The examinations papers frequently use bytes, however for this course you need to be able to work with up to 16 BITs and calculators are not allowed.</p> <p></p> <p>With 16 bits we could uniquely represent 2^16 (65536) different values, which is close to enough to encode every letter, number and character of every language.</p> <p>TERMINOLOGY</p> <p>Denary (Decimal)</p> <ul> <li>Definition: The base-10 number system used in everyday mathematics.</li> <li>Example: 42 in denary represents four tens and two ones.</li> </ul> <p>Binary</p> <ul> <li>Definition: The base-2 number system used in computing and digital electronics. </li> <li> <p>Example: 1011 in binary represents one eight, zero fours, one two, and one one.</p> </li> <li> <p>Bit |The smallest unit of data in a computer, representing a binary digit (0 or 1).</p> </li> <li>Nibble | A group of four binary digits (bits) or half a byte.</li> <li>Byte | A unit of digital information consisting of eight bits, commonly used to represent characters.</li> </ul> <p>Hexadecimal</p> <ul> <li>Definition: The base-16 number system often used in computing for compact representation.</li> <li>Example: 1F in hexadecimal represents one sixteen and fifteen ones.</li> </ul> <p>QUESTIONS</p> <p>1: What is the binary equivalent of the denary number 13?</p> <p>a) 1100</p> <p>b) 1001</p> <p>c) 1110</p> <p>d) 1101</p> <p>2: What is the denary equivalent of the binary number 101011?</p> <p>a) 41</p> <p>b) 43</p> <p>c) 45</p> <p>d) 47</p> <p>3: What is the HEX equivalent of the denary number 1024?</p> <p>a) 400</p> <p>b) 3FC</p> <p>c) 4000</p> <p>d) 408</p> <p>4: What is the denary equivalent of the HEX number AB?</p> <p>a) 165</p> <p>b) 170</p> <p>c) 175</p> <p>d) 180</p> <p>5: What is the binary equivalent of the HEX number FF?</p> <p>a) 11011101</p> <p>b) 11111111</p> <p>c) 10101010</p> <p>d) 10011001</p> <p>6: What is the HEX equivalent of the binary number 101101?</p> <p>a) 1B</p> <p>b) 1D</p> <p>c) 1F</p> <p>d) 21</p> <p>7: What is the denary equivalent of the binary number 11100001?</p> <p>a) 225</p> <p>b) 229</p> <p>c) 233</p> <p>d) 237</p> <p>8: What is the binary equivalent of the denary number 127?</p> <p>a) 01111111</p> <p>b) 10000001</p> <p>c) 10111111</p> <p>d) 11111110</p>"},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.3%20%20HEXADECIMAL%20USES/","title":"1.1.3 HEXADECIMAL USES","text":""},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.3%20%20HEXADECIMAL%20USES/#113-hexadecimal-uses","title":"1.1.3 | HEXADECIMAL USES","text":"<p>OBJECTIVES</p> <p>1.1.3 Understand how and why hexadecimal is used as a beneficial method of data representation</p>"},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.3%20%20HEXADECIMAL%20USES/#section-1-how-is-hexadecimal-used-in-computer-systems","title":"SECTION 1 | HOW IS HEXADECIMAL USED IN COMPUTER SYSTEMS","text":"<p>Hexadecimal (HEX) is a beneficial method of data representation for several reasons. Firstly, it is a more compact notation than binary for representing large numbers. Each digit in a HEX number represents 4 bits, which is more concise than the 8 bits required for each digit in binary. This makes HEX an efficient way to represent large amounts of data, particularly in for easy human interpretation.</p> <ul> <li>HEX is a widely recognized notation in digital systems, making it easier to communicate and interpret data across different systems and applications. Many devices and systems use HEX notation to display and transmit data, particularly in computer networking and telecommunications.</li> <li>HEX is easier for humans to read than binary, since HEX numbers can be represented using a smaller number of digits than binary numbers. This makes it easier to interpret and work with HEX data, particularly for non-technical users who may not be familiar with binary notation.</li> <li>HEX takes up less screen space than binary, which means it can be used on small displays such as washing machines to give error codes or other status information. HEX allows for concise, easy-to-read displays that can be used in a variety of applications and devices, making it a valuable tool for data representation in digital systems.</li> </ul> <p>Hexadecimal (HEX) is used in several areas within a computer system, including:</p> <ul> <li>Memory Addressing: Computer memory is typically organized as a series of individual addressable locations, each of which contains a binary value. These memory locations are often represented using HEX notation, which makes it easier for programmers and system administrators to work with large amounts of memory data.</li> <li>Programming: Many programming languages and development tools use HEX notation to represent binary values, such as machine instructions or memory addresses. HEX provides a more compact and convenient way to work with binary data in programming environments.</li> <li>Error Codes: In many computer systems, error codes are used to indicate specific system or software errors. These error codes are often displayed using HEX notation, which provides a concise and easy-to-read way to communicate complex error information to users.</li> <li>Network Addresses: In computer networking, HEX notation is often used to represent IP addresses and other network addresses. This allows network administrators to easily interpret and work with network addressing data in a concise and standardized format.</li> <li>Graphics: In computer graphics, HEX notation is used to represent colours using the RGB (Red-Green-Blue) colour model. Each colour component is represented using a 2-digit HEX number, allowing for precise and efficient representation of colour data.</li> </ul> <p>HEX is used in several important areas within a computer system, providing a valuable tool for representing and working with binary and other data in a standardized and efficient manner</p>"},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.3%20%20HEXADECIMAL%20USES/#section-2-hexadecimal-colour-representation","title":"SECTION 2 | HEXADECIMAL COLOUR REPRESENTATION","text":"<p>Just as numbers and letters are represented with Binary, so are images. To a computer an image is nothing more than a series of ones and zeros which allow the display of pixels in various colours.</p> <p>To aid human reading of different colour codes, colours are commonly represented in Hexadecimal using the RGB Red Green Blue system. For example the chart below shows how pure blue is represented using HEX, the HEX code for pure blue is #00 00 FF, meaning it has zero red components, zero green components and the maximum amount of Blue components.</p> <p></p> <p>A brief colour chart for some of the colours represented in hexadecimal.</p> <p>Most software that allows you to manipulate images or colours will allow you to select colours by their HEX or RGB values.</p> <p>Remember: Hex is used for our benefit to make it easy for use to see and work with, but the computer still deals with colour in binary format</p> <p>TERMINOLOGY</p> <p>Hexadecimal (HEX)</p> <p>A base-16 number system used in computing for a compact representation of binary data. HEX digits range from 0 to F, where each digit represents four binary bits.</p> <p>Binary</p> <p>A base-2 number system that uses only 0 and 1, representing the fundamental language of computers.</p> <p>Memory Addressing</p> <p>A method of organizing and accessing specific memory locations in a computer. Memory addresses are often represented in hexadecimal for readability, especially when working with large datasets.</p> <p>Programming</p> <p>The process of creating and managing instructions that computers follow. Hexadecimal is frequently used in programming to represent binary data more compactly, such as in memory addresses or machine instructions.</p> <p>Error Codes</p> <p>Identifiers used to signal specific errors in a computer system. Hexadecimal is often used to represent error codes, providing a standardized way to convey complex information in a compact format.</p> <p>Network Addressing</p> <p>The system of assigning addresses to devices on a network. HEX is commonly used for IP addresses and other network addresses, offering an easy-to-read, standardized format for network management.</p> <p>RGB (Red-Green-Blue)</p> <p>A color model where colors are represented through varying intensities of red, green, and blue. Each component is typically shown as a 2-digit hexadecimal value, providing a precise representation of colors for computer graphics.</p> <p>HEX Color Code</p> <p>A 6-digit code used in web design and graphics to define colors, where the first two digits represent red, the next two represent green, and the last two represent blue (e.g., #0000FF for pure blue).</p> <p>Pixel</p> <p>The smallest unit in a digital image, often represented in binary by color values. Each pixel\u2019s color is defined using the RGB model, commonly represented in hexadecimal to simplify human interpretation.</p> <p>Data Representation</p> <p>The methods by which various types of data are encoded for storage or processing in computers. HEX is one method of representation, particularly useful for displaying large binary numbers in a concise, human-readable form.</p> <p>Compact Notation</p> <p>A simplified way of displaying data. In computing, HEX is preferred over binary for its compactness, as it takes fewer digits to represent large binary numbers.</p> <p>QUESTIONS</p> <p>1: What is the benefit of using hexadecimal notation over binary notation for representing large numbers?</p> <p>2: Why is hexadecimal notation commonly used in computer programming?</p> <p>3: How are memory addresses typically represented using hexadecimal notation?</p> <p>4: What is the purpose of using hexadecimal notation for error codes in computer systems?</p> <p>5: How is hexadecimal notation used to represent IP addresses and other network addresses in computer networking?</p> <p>6: How is hexadecimal notation used in representing Unicode characters in computer systems?</p> <p>7: What is the relationship between hexadecimal notation and the RGB colour model?</p> <p>8: How is hexadecimal notation used to represent machine instructions in computer systems?</p>"},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.4%20%20BINARY%20ADDITION%20AND%20OVERFLOW/","title":"1.1.4  BINARY ADDITION AND OVERFLOW","text":""},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.4%20%20BINARY%20ADDITION%20AND%20OVERFLOW/#114-binary-addition-and-overflow","title":"1.1.4 | BINARY ADDITION AND OVERFLOW","text":"<p>OBJECTIVES 1.1.4</p> <p>(a) Add two positive 8-bit binary integers (b) Understand the concept of overflow and why it occurs in binary addition</p> <p>SECTION 1 | BINARY ADDITION</p> <p>It is simple to just convert a Binary representation to Denary, add the Denary values then convert back to Binary, however Binary addition is also easy if you follow the rules below:</p> <ul> <li>Zero plus Zero = 0</li> <li>Zero plus One = 1</li> <li>One plus One = 0 and carry a 1</li> <li>Three Ones = 1 plus carry a 1</li> </ul> <p></p> <p>Number 1 = 11 Number 2 = 6 Answer = 18\u200b</p> <p>Starting from the right(least significant bit) of the binary</p> <ul> <li>1 + 1 = 0 and carry 1 (shown in red in the 2s column)</li> <li>1 + 1 + 1 = 1 and carry 1 (shown in red in the 4s column)</li> <li>1 + 1 = 0 and carry 1 (shown in red in the 8s column)</li> <li>1 + 1 = 0 and carry 1 (shown in red in the 16s column)</li> <li>1 + 0 = 1</li> <li>Answer 1 0 0 1 0 which is 18</li> </ul> <p>Additional Example with Explanation</p> <p>Let\u2019s try a slightly larger binary addition example.</p> <p>Example: Add 1111 (15 in decimal) and 1001 (9 in decimal).</p> <p>1: Write the numbers aligned by column:</p> <p>1111 + 1001 </p> <p>2: Starting from the rightmost column: 1 + 1 = 0 \u2192 Write 0 and carry 1.</p> <p>3: Next column: 1 + 0 + 1 (carried) = 0 \u2192 Write 0 and carry 1.</p> <p>4: Next column: 1 + 0 + 1 (carried) = 0 \u2192 Write 0 and carry 1.</p> <p>5: Leftmost column: 1 + 1 + 1 (carried) = 1 \u2192 Write 1 and carry 1 to the next column. The result is 11000.</p> <p>Why Binary Addition is Important \u200bBinary addition is fundamental in computer systems because it\u2019s the basis for arithmetic operations in digital circuits. Understanding binary addition helps you grasp how computers process data at the most basic level.</p> <p>What is the result of adding the binary numbers 1011 and 1101?</p> <p>A) 10010</p> <p>B) 11100</p> <p>C) 10100</p> <p>D) 11000</p>"},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.4%20%20BINARY%20ADDITION%20AND%20OVERFLOW/#section-2-overflow","title":"SECTION 2 | OVERFLOW","text":"<p>Overflow in binary addition occurs when the result of adding two binary numbers exceeds the maximum value that can be represented by the number of bits allocated for the calculation. When this happens, the result cannot be represented accurately within the available bits, and the most significant bit (MSB) of the result is lost or \"overflows\" beyond the maximum value that can be represented.</p> <p>To understand this concept, consider adding two 8-bit binary numbers, 11111111 and 00000001. The sum of these two numbers is 1,00000000, but since only 8 bits are allocated for the result, the most significant bit of the sum is lost, resulting in a final answer of 00000000. In this case, overflow has occurred because the sum of the two numbers exceeds the maximum value that can be represented by 8 bits.</p> <p>Overflow can have serious consequences in computer systems and can lead to incorrect results or unexpected behavior. To avoid overflow, it is important to ensure that the number of bits allocated for binary calculations is sufficient to represent the expected range of values accurately. If overflow does occur, appropriate error handling mechanisms should be in place to alert the user or take corrective action.</p> <p>What happens when adding two 8-bit binary numbers results in a value greater than 255?</p> <p>A) The result is stored as-is in the 8-bit register.</p> <p>B) The extra bits are ignored, and only the first 8 bits are stored.</p> <p>C) An overflow error occurs because the result exceeds the 8-bit limit.</p> <p>D) The result is automatically converted to hexadecimal format.</p> <p>TERMINOLOGY</p> <p>Binary | A base-2 number system used in computing, consisting of only two digits: 0 and 1. It\u2019s the fundamental language of computers.</p> <p>Bit | The smallest unit of data in computing, represented as either 0 or 1. Bits are the building blocks of binary numbers.</p> <p>Binary Addition | The process of adding binary numbers. Follows specific rules, such as 1 + 1 = 10 in binary, where the result is 0 and a carry of 1.</p> <p>Carry | In binary addition, a carry occurs when two 1s are added together. The result is 0 in the current place value, with 1 carried over to the next higher place.</p> <p>8-bit Register | A fixed storage space in a computer\u2019s memory that holds 8 bits, allowing binary numbers up to 8 digits long.</p> <p>Overflow | An error that occurs when the result of a binary addition exceeds the storage limit of a register. In an 8-bit register, overflow happens if the sum exceeds 255.</p> <p>Decimal | A base-10 number system commonly used in everyday life. It includes the digits 0\u20139 and serves as a familiar reference point when learning binary.</p> <p>Base | The foundation of a number system that indicates how many unique digits are used. Binary is base-2, decimal is base-10, and hexadecimal is base-16.</p> <p>Register | A small, fast storage location within a computer\u2019s CPU used to store binary data temporarily.</p> <p>Place Value | In binary, each position represents a power of 2, with the rightmost place being 2^0, the next being 2^1, and so on.</p> <p>Overflow Error | A specific type of error caused when an arithmetic operation results in a value too large to be represented within the available number of bits.</p> <p>Carry Bit | A bit that is carried to the next column in binary addition, similar to carrying over in decimal addition.</p> <p>Bit Limit |The maximum number of bits that can be used in a particular operation or storage, such as an 8-bit limit in many systems.</p> <p>QUESTIONS</p> <p>Use a pen and paper and for each of the questions below work out the correct answer and show your working out.</p> <p>1: What is the result of adding the binary numbers 11010110 and 00101111?</p> <p>A) 100100100</p> <p>B) 11100101</p> <p>C) 11111111</p> <p>D) 01000000</p> <p>2: What is the result of adding the binary numbers 10011101 and 01100110?</p> <p>A) 11000011</p> <p>B) 00001111</p> <p>C) 11111111</p> <p>D) 01011011</p> <p>3: What is the result of adding the binary numbers 10101010 and 01010101?</p> <p>A) 11111111</p> <p>B) 00000000</p> <p>C) 11111110</p> <p>D) 11111101</p> <p>4: What is the result of adding the binary numbers 11001100 and 10101010?</p> <p>A) 01100110</p> <p>B) 11111111</p> <p>C) 11010110</p> <p>D) 10010100</p> <p>5: What is the result of adding the binary numbers 1111000011100001 and 0110101001101011?</p> <p>A) 10101011010011000</p> <p>B) 11011110101110110</p> <p>C) 10001101010001010</p> <p>D) 10100100111011011</p> <p>PART.2</p> <p>1: What is overflow in binary addition?</p> <p>A) A type of error that occurs when two binary numbers are subtracted</p> <p>B) A condition where the result of adding two binary numbers exceeds the maximum value that can be represented by the number of bits allocated for the calculation</p> <p>C) A method of compressing digital images</p> <p>D) A type of sorting algorithm</p> <p>2: Which of the following can cause overflow in binary addition?</p> <p>A) Adding two negative binary numbers</p> <p>B) Adding two positive binary numbers</p> <p>C) Subtracting two binary numbers</p> <p>D) Multiplying two binary numbers</p> <p>3: What happens when overflow occurs in binary addition?</p> <p>A) The result is rounded up to the nearest binary number</p> <p>B) The result is rounded down to the nearest binary number</p> <p>C) The most significant bit of the result is lost or \"overflows\" beyond the maximum value that can be represented</p> <p>D) The result is calculated using a different method</p> <p>4: How can overflow in binary addition be mitigated?</p> <p>A) By using a larger number of bits for the calculation</p> <p>B) By only adding binary numbers with the same sign</p> <p>C) By using a different binary arithmetic operation, such as subtraction or multiplication</p> <p>D) By rounding the result up to the nearest binary number</p> <p>5: Which of the following is a consequence of overflow in binary addition?</p> <p>A) The result is always accurate</p> <p>B) The result is incorrect and may cause unexpected behavior in a computer system</p> <p>C) The result is always rounded up to the nearest binary number</p> <p>D) The result is always rounded down to the nearest binary number</p>"},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.5%20%20BINARY%20SHIFT/","title":"1.1.5 BINARY SHIFT","text":""},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.5%20%20BINARY%20SHIFT/#115-binary-shift","title":"1.1.5 | BINARY SHIFT","text":"<p>OBJECTIVES 1.1.5 Perform a logical binary shift on a positive 8-bit binary integer and understand the effect this has on the positive binary integer</p> <p>WHAT IS A BINARY SHIFT</p> <p>Performing a logical binary shift on a positive 8-bit binary integer involves shifting all the bits in the binary number to the left or right by a specified number of positions. The shift can be either a left shift, which involves moving all the bits to the left and adding 0's on the right, or a right shift, which involves moving all the bits to the right and adding 0's on the left.</p> <p>The effect of a logical binary shift on a positive binary integer depends on the direction and the number of bit positions being shifted. In a left shift, the value of the binary number is effectively multiplied by 2 to the power of the number of bit positions being shifted. This is because each bit in the binary number represents a power of 2, and shifting the bits to the left increases the value of the number by a factor of 2. Conversely, in a right shift, the value of the binary number is effectively divided by 2 to the power of the number of bit positions being shifted. This is because shifting the bits to the right decreases the value of the number by a factor of 2.</p> <p>For example, let's consider the binary number 00011010. If we perform a left shift by 2 positions, we get 01101000. This is equivalent to multiplying the original value (26 in denary) by 2^2, which gives us 104 in denary. On the other hand, if we perform a right shift by 3 positions, we get 00000011. This is equivalent to dividing the original value (26 in denary) by 2^3, which gives us 3 in denary.</p> <p>This operation is commonly used in digital systems and programming languages to perform efficient arithmetic and data manipulation operations on binary data.</p> <p>HOW TO PERFORM A BINARY SHIFT</p> <p>Here are two example tables showing the the process of a binary shift and the outcome of each.</p> <p></p> <p>Table 1: Before Logical Binary Shift</p> <p></p> <p>Table 2: After Logical Binary Shift (Left Shift by 2 Positions)</p> <p>In this example, we have a binary number represented in an 8-bit format with the values of each bit position indicated in the column headers. The original binary number is 10110010 (178 in denary), which is represented in the first row of Table 1. We want to perform a left shift by 2 positions, which involves moving all the bits to the left and adding 0's on the right. The resulting binary number is 11001000 (200 in denary), which is represented in the first row of Table 2.</p> <p></p> <p>Table 3: Before Logical Binary Shift</p> <p></p> <p>Table 4: After Logical Binary Shift (Right Shift by 3 Positions)</p> <p>In this example, we have the same binary number represented in Table 3, which is 10110010 (178 in denary). We want to perform a right shift by 3 positions, which involves moving all the bits to the right and adding 0's on the left. The resulting binary number is 00001011 (11 in denary), which is represented in the first row of Table 4.</p> <p>TERMINOLOGY</p> <p>Binary | A base-2 number system used in computing that includes only two digits: 0 and 1.</p> <p>Bit | The smallest unit of data in computing, represented as either 0 or 1.</p> <p>Binary Shift | A method of moving the positions of binary digits either to the left or right, affecting the value of the binary number.</p> <p>Left Shift | A binary shift where each digit is moved one or more places to the left, effectively multiplying the binary number by 2 for each place shifted.</p> <p>Right Shift | A binary shift where each digit is moved one or more places to the right, effectively dividing the binary number by 2 for each place shifted.</p> <p>Place Value | The value of a position in a binary number, each representing a power of 2, increasing from right to left.</p> <p>Multiplication by Powers of 2 | The effect of a left shift, where the value of a binary number doubles with each left shift position.</p> <p>Division by Powers of 2 | The effect of a right shift, where the value of a binary number halves with each right shift position.</p> <p>Padding | The process of adding zeros to the right (in a left shift) or to the left (in a right shift) to maintain the binary structure after shifting.</p> <p>Overflow in Shifting | Occurs when a left shift pushes bits beyond the register\u2019s capacity, causing data to be lost.</p> <p>Logical Shift | A type of binary shift that simply moves all bits left or right and inserts a 0 at the vacant positions, with no consideration for the sign of the number.</p> <p>Arithmetic Shift | A binary shift typically used with signed numbers; it shifts the bits while maintaining the sign bit (the leftmost bit) in a right shift.</p> <p>QUESTIONS</p> <p>1: What is a logical binary shift?</p> <p>A) A type of sorting algorithm</p> <p>B) A way of converting binary to denary</p> <p>C) A method of manipulating binary numbers by shifting the bits left or right</p> <p>D) A way of compressing digital images</p> <p>2: What happens to a binary number when it is shifted left by one position?</p> <p>A) The value is multiplied by 2</p> <p>B) The value is divided by 2</p> <p>C) The value is shifted right by one position</p> <p>D) The value remains the same</p> <p>3: What happens to a binary number when it is shifted right by one position?</p> <p>A) The value is multiplied by 2</p> <p>B) The value is divided by 2</p> <p>C) The value is shifted left by one position</p> <p>D) The value remains the same</p> <p>4: Which of the following is a common use case for logical binary shifts in computer programming?</p> <p>A) Sorting data in a database</p> <p>B) Encrypting sensitive data</p> <p>C) Manipulating binary data efficiently</p> <p>D) Generating random numbers</p> <p>5: What is the effect of a logical binary shift on the size of a binary number?</p> <p>A) It always increases the size of the binary number</p> <p>B) It always decreases the size of the binary number</p> <p>C) It can increase or decrease the size of the binary number, depending on the direction and number of positions being shifted</p> <p>D) It has no effect on the size of the binary number</p> <p>6: If the binary value 110110 is shifted left by two positions, what is the resulting binary value?</p> <p>A) 000011</p> <p>B) 101101</p> <p>C) 011011</p> <p>D) 011000</p> <p>7: If the binary value 10010010 is shifted right by three positions, what is the resulting binary value?</p> <p>A) 00010010</p> <p>B) 00010001</p> <p>C) 10000100</p> <p>D) 01001000</p>"},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.6%20%20TWO%27S%20COMPLEMENT/","title":"1.1.6 TWO'S COMPLEMENT","text":""},{"location":"1%20DATA%20REPRESENTATION/1.1%20NUMBER%20SYSTEMS/1.1.6%20%20TWO%27S%20COMPLEMENT/#116-twos-complement","title":"1.1.6 | TWO'S COMPLEMENT","text":"<p>OBJECTIVES 1.1.6 Use two\u2019s complement to represent positive and negative 8-bit binary integers</p> <ul> <li>Convert a positive binary or denary integer to a two\u2019s complement 8-bit integer and vice versa</li> <li>Convert a negative binary or denary integer to a two\u2019s complement 8-bit integer and vice versa</li> </ul> <p>WHAT IS NEGATIVE NUMBER REPRESENTATION ?</p> <p>Computers use various methods of representing negative numbers. The three methods of representing negative numbers discussed here are:</p> <ul> <li>Sign and Magnitude</li> <li>One's Complement</li> <li>Two's Complement</li> </ul> <p>A normal binary number that has had no change made to it would be referred to as 'unsigned binary' , so if an exam question gives a binary number and stipulates that it is unsigned then it is a simple straight forward binary number. (As was represented on the binary page of this website), for example:</p> <p>0 1 0 1 1 0 0 1 represents the numeric value of 89</p> <p>SIGN AND MAGNITUDE Sign and magnitude is a simple method of representing negative. It simply takes the most significant BIT (the left hand bit) of a binary value and uses it to represent if the number is positive or negative.</p> <p>The rule of Sign and Magnitude is:</p> <ul> <li>The most significant bit represents if it is positive or negative(0 = positive, 1 = negative)</li> <li>The remaining bits represent the value of the number</li> </ul> <p>As can be seen in the table below.</p> <p></p> <p>Sign and Magnitude works but it is not a very good method of representing negative numbers because:</p> <ul> <li>It creates two 0s : A positive 0 and a negative 0</li> <li>It creates hardware problems in the processing of these numbers</li> </ul> <p>If you have an exam question that say the number given is already in Sign and Magnitude representation then you need to answer accordingly.</p> <p>Question: If 10001101 is already in its Sign and Magnitude representation then what would the denary value be? Answer: -13 :Because the most significant bit is 1 so we know it is a negative number and then the remaining bits add up to 13 therefore the answer is negative -13.</p> <p>ONES COMPLEMENT</p> <p>One's complement is another method of representing negative numbers. Computer hardware can process One's Complement numbers better than those represented in Sign and Magnitude however, one's complement still produces two 0s.</p> <p>The rule of One's complement is:</p> <ul> <li>Take the positive value and flip the bits to create the complement.</li> </ul> <p>So for example, take 0 0 1 which represents the denary value of 1, flip the bits (change the 0s to 1s and 1s to 0s), this gives you 1 1 0 which in One's Complement represents negative -1 . Again the positive values will always be represented with 0 being the most significant bit. As can be seen in the table below.</p> <p></p> <p>One's complement is still inefficient because:</p> <ul> <li>It creates two 0s : a positive 0 and a negative 0</li> </ul> <p>If you have an exam question that say the number given is already in One's Complement representation then you need to answer accordingly.</p> <p>Question: If 10001101 is already in its One's Complement representation then what would the denary value be? Answer: -114 :By flipping the bits back to their original value we get 01110010 which is 114 therefore -114 is the complement.</p> <p>TWOS COMPLEMENT</p> <p>Two's Complement is another way of representing negative numbers in binary and it is less problematic than Sign and Magnitude or One's Complement.</p> <p>The rule to convert a number into its Two's complement representation are;</p> <ul> <li>Flip the bits</li> <li>Add 1</li> </ul> <p>As can be seen in the table below, if we flip the BITs(same as in One's Complement) then add 1 to the flipped result, the answer represents the Two's complement value.</p> <p></p> <p>Two's complement is more efficient because:</p> <ul> <li>It only produces one Zero</li> <li>It does not create hardware problems in processing</li> </ul> <p>If you have an exam question that say the number given is already in Two's Complement representation then you need to answer accordingly.</p> <p>Question: If 10001101 is already in its Two's Complement representation then what would the denary value be? Answer: -115 :Because (working in reverse) if we take 01110011 (115) flip the bits it gives us 10001100, add 1 to this value give us 10001101. So the answer is negative -115.</p> <p>TERMINOLOGY</p> <p>Binary | A base-2 number system used in computing, consisting only of the digits 0 and 1.</p> <p>Bit | The smallest unit of data in computing, represented as either 0 or 1.</p> <p>Sign and Magnitude | A method of representing positive and negative numbers in binary. The leftmost bit (sign bit) represents the sign, where 0 indicates a positive number and 1 indicates a negative number.</p> <p>One\u2019s Complement | A binary method of representing negative numbers. To find the one\u2019s complement of a binary number, invert all bits (change 0s to 1s and 1s to 0s).</p> <p>Two\u2019s Complement | A method used in binary to represent positive and negative integers. To get the two\u2019s complement of a number, invert all bits (find the one\u2019s complement) and then add 1 to the result. This system is widely used because it simplifies binary arithmetic.</p> <p>Sign Bit | The leftmost bit in a binary number that indicates the number\u2019s sign. In sign and magnitude, a 0 in this bit represents a positive number, and a 1 represents a negative number.</p> <p>Magnitude | The part of a binary number that represents the actual value, without considering the sign bit.</p> <p>Invert | To change each bit in a binary number to its opposite: 0 becomes 1, and 1 becomes 0.</p> <p>Overflow | An error that occurs when a binary operation produces a result that exceeds the range that can be represented within the allocated number of bits.</p> <p>Binary Addition | The process of adding binary numbers. It follows specific rules and is foundational to operations in two\u2019s complement.</p> <p>8-bit System | A binary representation limited to 8 bits, allowing values from -128 to 127 in two\u2019s complement form.</p> <p>Unsigned Integer | A binary number that represents only positive values, with no sign bit.</p> <p>Complement | A method of obtaining the inverse or opposite value of a binary number. In one\u2019s complement, all bits are inverted, and in two\u2019s complement, 1 is added to the inverted bits.</p> <p>QUESTIONS</p> <p>1: What is the purpose of sign and magnitude, one's complement and two's complement methods?</p> <p>2: What are the rules for sign and magnitude?</p> <p>3: What are the limitations for the sign and magnitude method?</p> <p>4: Using sign and magnitude what is negative representation for -55? (show your workings)</p> <p>5: What are the rules for one's complement?</p> <p>6: What are the limitations for the one's complement?</p> <p>7: Using one's complement what is negative representation for -55? (show your workings)</p> <p>8: What are the rules for two's?</p> <p>9: Using two's complement what is negative representation for -55? (show your workings)</p> <p>10: If the value 10101000 is already in two's complement, what is the Denary value represented?</p>"},{"location":"1%20DATA%20REPRESENTATION/1.2%20TEXT%2C%20SOUND%20AND%20IMAGES/1.2.1%20%20TEXT%2C%20SOUND%20AND%20IMAGES/","title":"1.2.1  TEXT, SOUND AND IMAGES","text":""},{"location":"1%20DATA%20REPRESENTATION/1.2%20TEXT%2C%20SOUND%20AND%20IMAGES/1.2.1%20%20TEXT%2C%20SOUND%20AND%20IMAGES/#121-text-sound-and-images","title":"1.2.1 | TEXT, SOUND AND IMAGES","text":""},{"location":"1%20DATA%20REPRESENTATION/1.2%20TEXT%2C%20SOUND%20AND%20IMAGES/1.2.1%20%20TEXT%2C%20SOUND%20AND%20IMAGES/#ascii-and-unicode","title":"ASCII AND UNICODE","text":"<p>Computers represent text using character sets, which are sets of characters and symbols that are assigned a unique binary code that can be understood by the computer. The use of character sets is important because it enables computers to store and display text in a standardized way, regardless of the language or alphabet used.</p> <p>One of the most widely used character sets is the American Standard Code for Information Interchange (ASCII), which was developed in the 1960s for use with early computers. ASCII uses 7 bits to represent a total of 128 characters, including letters, numbers, and symbols commonly used in the English language. ASCII is widely used in the US, and is also used as a base for other character sets in different parts of the world.</p> <p>As computers became more advanced and widespread, it became clear that the 128 characters of ASCII were not sufficient to represent all the characters and symbols used in different languages and scripts around the world. In response to this, Unicode was developed in the 1990s as a universal character set that could represent all characters used in any language or script. Unicode uses 16 bits to represent a total of 65,536 characters, including characters from different scripts such as Latin, Arabic, Chinese, and many more.</p> <p>Unicode has become the standard for representing text in modern computing, and most modern operating systems, applications, and programming languages support Unicode. The use of Unicode has enabled the development of software and applications that can display text in different languages and scripts, which has been important for global communication and accessibility.</p> <p>In summary, computers represent text using character sets, which are sets of characters and symbols assigned unique binary codes. The American Standard Code for Information Interchange (ASCII) is a widely used character set that uses 7 bits to represent 128 characters, while Unicode is a universal character set that uses 16 bits to represent 65,536 characters, including characters from different scripts and languages.</p> <p>Which of the following statements is TRUE about ASCII and Unicode?</p> <p>A) ASCII can represent all characters from all languages worldwide.</p> <p>B) Unicode uses more bits per character than ASCII to represent characters from multiple languages.</p> <p>C) ASCII and Unicode use the same number of bits to represent each character.</p> <p>D) Unicode was developed before ASCII to support English characters.</p> <p>TERMINOLOGY</p> <p>Character Encoding | A system for representing characters, symbols, and text using numbers that a computer can interpret.</p> <p>ASCII (American Standard Code for Information Interchange) | A character encoding standard that uses 7 or 8 bits to represent English letters, numbers, and basic symbols, covering 128 characters in its standard form.</p> <p>Extended ASCII | An 8-bit version of ASCII that includes additional characters (up to 256 total) for symbols and accented letters used in other languages.</p> <p>Unicode | A universal character encoding standard that can represent characters from almost all written languages, supporting over 143,000 characters and using multiple encoding formats like UTF-8, UTF-16, and UTF-32.</p> <p>Emoji | Graphical symbols encoded within Unicode that allow visual representation of expressions, objects, and emotions. They are part of Unicode and often encoded in UTF-8 or UTF-16.</p> <p>Backward Compatibility | The ability of a newer system (like UTF-8) to support older standards, allowing ASCII characters to be used without modification.</p> <p>Multilingual Support | The capability of Unicode to represent characters from various languages, making it ideal for globalized applications and international text processing.</p> <p>Hexadecimal Representation | A base-16 number system often used in Unicode to represent code points, with characters prefixed by 'U+', like U+0041 for 'A'.</p> <p>Encoding Scheme | The set of rules that define how characters are converted to bytes in a particular encoding, such as UTF-8 or ASCII.</p> <p>QUESTIONS</p> <p>1: What is a character set?</p> <p>A) A set of fonts used by a particular software program</p> <p>B) A set of colours used in graphic design</p> <p>C) A set of characters and symbols assigned a unique binary code that can be understood by a computer</p> <p>D) A set of keyboard shortcuts for commonly used commands</p> <p>2: What is the American Standard Code for Information Interchange (ASCII)?</p> <p>A) A set of computer hardware standards</p> <p>B) A type of computer virus</p> <p>C) A character set used for representing text</p> <p>D) A programming language used for web development</p> <p>3: Why was Unicode developed?</p> <p>A) To provide a standardized way of representing text across different languages and scripts</p> <p>B) To provide a more efficient way of compressing digital images</p> <p>C) To provide a faster way of processing mathematical equations</p> <p>D) To provide a more secure way of encrypting data</p> <p>4: What is the difference between ASCII and Unicode?</p> <p>A) ASCII is a universal character set, while Unicode is only used for representing English text</p> <p>B) ASCII uses 8 bits to represent characters, while Unicode uses 16 bits</p> <p>C) ASCII is a newer character set than Unicode</p> <p>D) ASCII can only represent characters from the English language, while Unicode can represent characters from any language or script</p> <p>5: Why is the use of character sets important in computing?</p> <p>A) It enables computers to store and display text in a standardized way, regardless of the language or alphabet used</p> <p>B) It makes it easier for programmers to write code</p> <p>C) It helps to prevent computer viruses and malware</p> <p>D) It allows computers to perform mathematical calculations more efficiently</p>"},{"location":"1%20DATA%20REPRESENTATION/1.2%20TEXT%2C%20SOUND%20AND%20IMAGES/1.2.2%20%20SOUND%20REPRESENTATION/","title":"1.2.2  SOUND REPRESENTATION","text":""},{"location":"1%20DATA%20REPRESENTATION/1.2%20TEXT%2C%20SOUND%20AND%20IMAGES/1.2.2%20%20SOUND%20REPRESENTATION/#222-sound-representation","title":"2.2.2 | SOUND REPRESENTATION","text":""},{"location":"1%20DATA%20REPRESENTATION/1.2%20TEXT%2C%20SOUND%20AND%20IMAGES/1.2.2%20%20SOUND%20REPRESENTATION/#what-is-sound","title":"WHAT IS SOUND ?","text":"<p>Sound is vibrations that oscillate in wave forms creating a change in pressure. Each wave is defined as a frequency, one oscillation can be seen in the diagram below.</p> <p></p> <p>Showing one full oscillation and a frequency of 18 Hertz</p> <p>Frequency is measured in hertz. The diagram above shows one complete oscillation in 18 seconds, this means the wave have a frequency of 18 hertz. \u200b Sound travels as an analogue wave and we need to convert the analogue wave into digital representation for computer use. When converting the analogue wave into digital format there are two main factors we need to consider.</p> <ul> <li>How often do we want to take a sample of the original sound wave(times per second), this is known as sample rate. </li> <li>At what points on the amplitude do we want to take a sample, the amount of points on the amplitude that we are able to take a sample is called the bit depth or resolution.</li> </ul> <p>If we were looking to convert the above sound wave into digital, we can only take samples were the wave meets a bit depth point and we can only take samples on a predefined time per second. If we were to take 2 samples per second then we would have taken 36 samples of the one oscillation illustrated. These samples can only be recorded on one of the bit depth levels. As illustrated with the sample taken at 15 seconds (marked X).</p> <p>The above diagram has a bit depth of 3, because 3 bits have been used to represent the amplitude, this would mean a maximum of 8 or 2^3 points on the amplitude could be digitally represented.</p> <p>Note: The values used are just for illustration purpose, in practice you could expect a sample rate of about 40,000 and a bit depth of 32.</p> <p>When considering what sample rate and what bit depth to use there are a few factors to influence this decision. </p> <ul> <li>Nyquist's theorem - We need to sample a sound wave at double its highest frequency to be able to produce an accurate reproduction of the original.</li> <li>The scope of the human ear - The human ear can hear between 20Hz and 20,000Hz, much of a sound wave will be out of this range and not worth recording anyway. A band-limiting filter if often used to clip frequency out of the 20Hz - 20,000Hz range.</li> <li>The purpose of the recording and the medium through which it is used. - If the sound expected to be high quality and is to be played on a high quality sound system then a high sample rate and high bit depth is needed. If less quality is needed of it is to be streamed to platforms like youtube then a lower sample rate and bit depth would allow for faster data transfer.</li> </ul> <p>According to Nyquist's theorem if a sound wave has a frequency of 10,000Hz we would need to sample at 20,000 samples per second to get an accurate reproduction of the original. Most CDs are recorded at 44,100 samples.</p> <p>CALCULATING SOUND FILE SIZE</p> <p></p> <p>The result for the example above is shown in Bits but, it would be more appropriate to show the results in bytes, megabytes. To convert to a more appropriate representation, firstly you would divide by 8 to see how many bytes and then by 1024 for Kb and 1024 for Mb and so on..</p> <p>9,600,000 / 8 = 1,200,000 Bytes</p> <p>1,200,000 / 1024 = 1171.875 Kilo Bytes</p> <p>1171.875 / 1024 = 1.14 Mega Bytes</p> <p>1.4Mb is a much more appropriate term to use for the representation of the file size example above.</p> <p>The above example presumes that the audio output is mono (the exact same sound is being sent to each speaker. Currently sound representation is at very least recorded in stereo, meaning that the left and right speaker work independently, if the sound is stored in stereo then the file size should be double. With larger home audio system a 5.1 representation could be expected, in this care each speaker has its independent sound track, Front Left, Front Center, Front Right, Rear Left, Rear Right and separate base speaker (subwoofer), in this case 6 channels may be needed so the file size could be 1.14Mb X 6. ( Check out the beach scene in 5.1 on the movie 'Saving Private Ryan' for a cool representation of 5.1 surround).</p>"},{"location":"1%20DATA%20REPRESENTATION/1.2%20TEXT%2C%20SOUND%20AND%20IMAGES/1.2.2%20%20SOUND%20REPRESENTATION/#how-does-a-microphone-work","title":"HOW DOES A MICROPHONE WORK","text":"<p>Internal working of a microphone</p> <p>A microphone is a relative simple piece of technology using a transducer to convert movement to digital representation. It is like an inverted speaker, it uses a diaphragm to collect the sound, the diaphragm moves as waves of sound displace its position. It is delicately balanced to return to it neutral position after a sound wave has forced it to move. The diaphragm movement is connected a coil placed over a magnet this movement creates an electrical charge, as it movements alternates the electric current flowing alternates. This value can then be measured and converted into a digital representation of sound by measuring the frequency and depth of change.</p> <p>What does a higher sample rate in digital audio recording achieve?</p> <p>A) It increases the volume of the recorded audio.</p> <p>B) It captures more details of the sound wave, resulting in higher quality.</p> <p>C) It reduces the size of the audio file.</p> <p>D) It reduces the amount of memory needed to store the audio.</p> <p>TERMINOLOGY</p> <p>Sound Representation | The process by which a computer stores and interprets sound data in binary form.</p> <p>Digital Audio | Audio that has been converted from an analog sound wave into a digital format using binary numbers.</p> <p>Sample Rate | The number of samples taken per second when converting analog sound into digital form, measured in hertz (Hz). Higher sample rates capture more detail.</p> <p>Sample Resolution | Also known as bit depth, it refers to the number of bits used to represent each audio sample. Higher sample resolution allows for more precise representation of sound.</p> <p>Bit Depth | The number of bits in each audio sample. Common bit depths include 8-bit, 16-bit, and 24-bit, with higher values allowing for greater dynamic range in sound.</p> <p>Hertz (Hz) | The unit of frequency, representing cycles per second. In audio, sample rate is often measured in hertz, such as 44,100 Hz (44.1 kHz).</p> <p>Analog to Digital Conversion (ADC) | The process of converting continuous analog sound waves into discrete digital samples that a computer can process.</p> <p>Amplitude | The height of a sound wave, representing the volume or loudness. Higher amplitudes correspond to louder sounds and are represented by higher numerical values in digital audio.</p> <p>Dynamic Range | The range between the softest and loudest parts of a sound, measured in decibels (dB). Higher bit depths in digital audio capture a greater dynamic range.</p> <p>Decibel (dB) | A unit used to measure the intensity or loudness of sound. In digital audio, higher bit depths support a wider dynamic range in decibels.</p> <p>Compression (Audio) | Techniques used to reduce the file size of digital audio. Lossy compression reduces file size by discarding some data, while lossless compression retains all original data.</p> <p>Quantization | The process of mapping a large set of values (such as a range of sound amplitudes) to a smaller set, based on the sample resolution. Quantization can lead to slight inaccuracies known as quantization error.</p> <p>Quantization Error | Small differences between the actual amplitude of the analog sound wave and its digital representation due to rounding in quantization.</p> <p>Frequency | The rate at which a sound wave oscillates, measured in hertz (Hz). In digital audio, the sample rate must be at least twice the highest frequency to accurately reproduce the sound.</p> <p>Nyquist Theorem | A principle stating that the sample rate must be at least twice the highest frequency present in the sound to avoid distortion and accurately reproduce it.</p> <p>QUESTIONS</p> <p>1: Fill in the blanks</p> <p>A microphone captures sound in an analogue format, before the computer can represent this a .............................. is needed to convert the sound to a .................... format. </p> <p>2: Describe what is meant by the term 'sampling'.</p> <p>3: Explain why the sample rate effects the quality of the sound</p> <p>4: Describe what is meant by the term 'bit depth'.</p> <p>5: Describe what is meant by the term 'channel'.</p> <p>6: Sound for youtube videos is often not represented at high quality, give 3 reasons why this might be the case for this scenario.</p> <p>SOUND FILE SIZE</p> <p>1: Calculate the file size for the following sound sample, give the size in MB</p> <ul> <li>Mono</li> <li>Sample rate: 42000</li> <li>Bit Depth: 16bit</li> <li>Time: 60 seconds</li> </ul> <p>2: Calculate the file size for the following sound sample, give the size in MB</p> <ul> <li>Stereo</li> <li>Sample rate: 20000</li> <li>Bit Depth: 16bit</li> <li>Time: 120 seconds</li> </ul> <p>3: What happens to the file size as more channels are represented?</p> <p>4: Calculate the file size for the following sound sample, give the size in MB</p> <ul> <li>4 channel</li> <li>Sample rate: 44100</li> <li>Bit Depth: 16</li> <li>Time: 180</li> </ul>"},{"location":"1%20DATA%20REPRESENTATION/1.2%20TEXT%2C%20SOUND%20AND%20IMAGES/1.2.3%20%20IMAGE%20REPRESENTATION/","title":"1.2.3  IMAGE REPRESENTATION","text":""},{"location":"1%20DATA%20REPRESENTATION/1.2%20TEXT%2C%20SOUND%20AND%20IMAGES/1.2.3%20%20IMAGE%20REPRESENTATION/#123-image-representation","title":"1.2.3 | IMAGE REPRESENTATION","text":"<p>WHAT IS IMAGE REPRESENTATION?</p> <p>Just as numbers and letters are represented with Binary, so are images. To a computer an image is nothing more than a series of ones and zeros which allow the display of pixels in various colours.</p> <p>To aid human reading of different colour codes, colours are commonly represented in Hexadecimal using the RGB Red Green Blue system. For example the chart below shows how pure blue is represented using HEX, the HEX code for pure blue is #00 00 FF, meaning it has zero red components, zero green components and the maximum amount of Blue components.</p> <p></p> <p>A brief colour chart for some of the other colours represented in hexadecimal. Most software that allows you to manipulate images or colours will allow you to select colours by their HEX or RGB values.</p> <p></p> <p>Remember: Hex is used for our benefit to make it easy for use to see and work with, but the computer still deals with colour in binary format.</p> <p>Image quality</p> <p>The quality of an image depends predominantly of two factors, the amount of Pixels Per Inch (PPi) and the colour depth. The colour depth is determined by how many bits are used to represent each pixel, if 4 bits were used, most images would be grey scale, represented with only 2^4 (16) different shades possible to represent. HEX colour systems are commonly used and allow for 255 possible representations for each colour, Red, Green and Blue which equates to 8 bits used for each of the 3 colour, meaning 24 bit colour depth per pixel (2^24 = 16777216), giving over 16 million individual colours.</p> <p>WHAT IS METADATA</p> <p>Metadata is extra information that is within a picture file, as we learn from above the picture is actually just strings of binary, and within these string there is often extra data stored. This data often includes details of the device that took the picture and information such as the date the picture was taken. The amount of meta data has an impact on the actual file size of the image so calculating the file size from the image dimensions and bit depth might not be 100% accurate. </p> <p>IMAGE FILE TYPES</p> <p>There are many different type of images and each format has its unique attributes as follows:</p> <p>JPEG or JPG : Joint Photographic Expert Group, a jpeg image has been compressed from its original size. The compression type is lossy, meaning it does loose some of its quality during compression. JPGs are good for photographs that require good quality images but a small data storage size, such as a photograph being used on a website.</p> <p>Some other popular image file types include.</p> <p>PNG: PORTABLE NETWORK GRAPHICS - Supports good quality graphics with 24BIT representation and designed to work well online through web-browsers.</p> <p>GIF: GRAPHICS INTERCHANGE FORMAT - Normally not compressed and can retain features such as background transparency. The File can be large due to lack of compression. Compatible with many platforms.</p> <p>BMP: BITMAP - Normally not compressed and therefore often maintain good quality but can take up more file space.</p> <p>What does a higher resolution achieve in a digital image?</p> <p>A) It increases the file size without improving image quality.</p> <p>B) It reduces the number of colors in the image.</p> <p>C) It makes the image sharper and more detailed.</p> <p>D) It reduces the size of the image on the screen.</p> <p>TERMINOLOGY</p> <p>Image Representation | The process by which a computer stores and displays visual data, such as images, using binary code.</p> <p>Pixel | The smallest unit of a digital image, often represented as a tiny square of color. The image is made up of many pixels arranged in a grid.</p> <p>Resolution | The number of pixels in an image, often expressed as width by height (e.g., 1920x1080). Higher resolution means more pixels, resulting in a sharper and more detailed image.</p> <p>Color Depth | The number of bits used to represent the color of a single pixel. Higher color depth allows for more color combinations, improving image quality.</p> <p>Bit Depth | Refers to the number of bits used for each color channel in an image. For example, 8-bit color depth uses 8 bits per color channel, resulting in 256 color values per channel.</p> <p>RGB (Red, Green, Blue) | A color model where colors are represented by varying intensities of red, green, and blue. Each color is a combination of these three channels.</p> <p>Palette | A set of colors available in an image. In limited color depth images, a palette is often used to represent colors more efficiently.</p> <p>Compression | A method of reducing the file size of an image. Lossless compression retains all original data, while lossy compression sacrifices some detail to achieve a smaller file size.</p> <p>Binary Code | The system of 0s and 1s used by computers to store all data, including image data. Each pixel\u2019s color is stored as binary data.</p> <p>File Format | The structure or type of an image file, such as JPEG, PNG, or BMP, which determines how the data is stored, compressed, and displayed.</p> <p>Grayscale | An image that contains only shades of gray, represented by varying brightness levels from black to white. Grayscale images have lower color depth than full-color images.</p> <p>High Resolution | An image with a large number of pixels, which results in more detail and clarity.</p> <p>Low Resolution | An image with fewer pixels, which may appear blurry or pixelated when viewed at larger sizes.</p> <p>True Color | A color depth of 24 bits, allowing for over 16 million color combinations and providing very high-quality color representation.</p> <p>QUESTIONS</p> <p>1: Explain what is meant by the term \u2018pixel\u2019?</p> <p>2: What is meant by the term \u2018megapixel\u2019?</p> <p>3: What is meant by the term 'colour depth'?</p> <p>4: Suggest two things that happen when you increase the colour depth.</p> <p>5: What is meant by the term \u2018image resolution\u2019?</p> <p>6: Suggest two things that happen when you increase the image resolution.</p> <p>7: What is a Vector Graphic?</p> <p>8: What is Meta Data</p> <p>9: Give an example of information that could be stored in Meta data</p>"},{"location":"1%20DATA%20REPRESENTATION/1.3%20DATA%20STORAGE%20AND%20COMPRESSION/1.3.1%20%20DATA%20STORAGE%20MEASUREMENTS/","title":"1.3.1  DATA STORAGE MEASUREMENTS","text":""},{"location":"1%20DATA%20REPRESENTATION/1.3%20DATA%20STORAGE%20AND%20COMPRESSION/1.3.1%20%20DATA%20STORAGE%20MEASUREMENTS/#131-data-storage-measurements","title":"1.3.1 | DATA STORAGE MEASUREMENTS","text":"<p>DATA STORAGE MEASUREMENTS</p> <p>Data storage is measured in units of bytes, with larger units being used to represent larger storage capacities. For example, early computers such as the IBM 650 in the 1950s had a storage capacity of around 2000 characters, or roughly 2 kilobytes (KB) of data. By the 1980s, personal computers such as the Apple II and Commodore 64 had storage capacities of around 64 KB to 128 KB.</p> <p>Today, modern computer storage devices such as hard disk drives, solid state drives, and USB flash drives have storage capacities that range from a few gigabytes (GB) to multiple terabytes (TB). For example, a typical laptop hard drive might have a capacity of 500 GB, while high-end solid state drives can have capacities of up to 4 TB.</p> <p>Storage capacity can be represented in different formats, such as megabytes (MB), gigabytes (GB), terabytes (TB), and so on. However, these units are based on powers of 10, which can lead to confusion when dealing with binary data storage. To address this issue, a binary prefix system was introduced, which uses prefixes such as kibi-, mebi-, gibi-, and tebi- to represent binary multiples of bytes (powers of 2). For example, a kibibyte (KiB) represents 1024 bytes, while a megabyte (MB) represents 1000 bytes.</p> <p>In summary, data storage is measured in units of bytes, with larger units being used to represent larger storage capacities. Early computers had relatively small storage capacities, while modern computer storage devices can store terabytes of data. Storage capacity can be represented in different formats, and binary prefixes such as kibi- and mebi- are used to represent binary multiples of bytes.</p> <p>The following data storage notations are listed in order of size and an example use for each is given:</p> <ul> <li>Bit: 1 bit represents a single binary digit, which can be either a 0 or a 1. Bits are used to represent the smallest unit of digital data and are often used in communication protocols and encryption algorithms.</li> <li>Nibble: A nibble represents 4 bits of data, or half a byte. Nibbles are not commonly used in modern computing, but were used in older systems to represent hexadecimal values.</li> <li>Byte: A byte represents 8 bits of data and is the basic unit of storage in most computer systems. Bytes are used to represent individual characters, such as letters and numbers, as well as larger data types such as images and audio.</li> <li>Kibibyte (KiB): 1 KiB represents 1024 bytes of data. KiB is used to represent small to medium-sized files, such as text documents or low-resolution images.</li> <li>Mebibyte (MiB): 1 MiB represents 1024 KiB, or 1,048,576 bytes of data. MiB is used to represent larger files, such as high-resolution images or short audio clips.</li> <li>Gibibyte (GiB): 1 GiB represents 1024 MiB, or 1,073,741,824 bytes of data. GiB is used to represent even larger files, such as videos or large software applications.</li> <li>Tebibyte (TiB): 1 TiB represents 1024 GiB, or 1,099,511,627,776 bytes of data. TiB is used to represent very large files, such as high-resolution videos or large databases.</li> <li>Pebibyte (PiB): 1 PiB represents 1024 TiB, or 1,125,899,906,842,624 bytes of data. PiB is used to represent data storage at the petabyte level, such as in large data centers or cloud storage services.</li> <li>Exbibyte (EiB): 1 EiB represents 1024 PiB, or 1,152,921,504,606,846,976 bytes of data. EiB is used to represent data storage at the exabyte level, such as in scientific research or big data applications.</li> </ul> <p>Which of the following is the correct order of data storage units from smallest to largest?</p> <p>A) Bit, Byte, Kilobyte, Gigabyte, Megabyte</p> <p>B) Bit, Byte, Kilobyte, Megabyte, Gigabyte</p> <p>C) Byte, Bit, Megabyte, Kilobyte, Gigabyte</p> <p>D) Byte, Bit, Kilobyte, Terabyte, Megabyte</p> <p>TERMINOLOGY</p> <ul> <li>Bit: 1 bit represents a single binary digit, which can be either a 0 or a 1. Bits are used to represent the smallest unit of digital data and are often used in communication protocols and encryption algorithms.</li> <li>Nibble: A nibble represents 4 bits of data, or half a byte. Nibbles are not commonly used in modern computing, but were used in older systems to represent hexadecimal values.</li> <li>Byte: A byte represents 8 bits of data and is the basic unit of storage in most computer systems. Bytes are used to represent individual characters, such as letters and numbers, as well as larger data types such as images and audio.</li> <li>Kibibyte (KiB): 1 KiB represents 1024 bytes of data. KiB is used to represent small to medium-sized files, such as text documents or low-resolution images.</li> <li>Mebibyte (MiB): 1 MiB represents 1024 KiB, or 1,048,576 bytes of data. MiB is used to represent larger files, such as high-resolution images or short audio clips.</li> <li>Gibibyte (GiB): 1 GiB represents 1024 MiB, or 1,073,741,824 bytes of data. GiB is used to represent even larger files, such as videos or large software applications.</li> <li>Tebibyte (TiB): 1 TiB represents 1024 GiB, or 1,099,511,627,776 bytes of data. TiB is used to represent very large files, such as high-resolution videos or large databases.</li> <li>Pebibyte (PiB): 1 PiB represents 1024 TiB, or 1,125,899,906,842,624 bytes of data. PiB is used to represent data storage at the petabyte level, such as in large data centers or cloud storage services.</li> <li>Exbibyte (EiB): 1 EiB represents 1024 PiB, or 1,152,921,504,606,846,976 bytes of data. EiB is used to represent data storage at the exabyte level, such as in scientific research or big data applications.</li> </ul> <p>QUESTIONS</p> <p>1: What is the size of a byte in bits?</p> <p>a) 4 bits</p> <p>b) 8 bits</p> <p>c) 16 bits</p> <p>d) 32 bits</p> <p>2: Which of the following is a larger unit of storage than a gigabyte?</p> <p>a) Megabyte</p> <p>b) Terabyte</p> <p>c) Kilobyte</p> <p>d) Petabyte</p> <p>3: How many bytes are in a mebibyte (MiB)?</p> <p>a) 1024 bytes</p> <p>b) 1000 bytes</p> <p>c) 1,048,576 bytes</p> <p>d) 1,000,000 bytes</p> <p>4: What is the next largest storage unit after a tebibyte (TiB)?</p> <p>a) Zebibyte (ZiB)</p> <p>b) Pexabyte (PeB)</p> <p>c) Exbibyte (EiB)</p> <p>d) Yobibyte (YiB)</p> <p>5: How many bits are in a nibble?</p> <p>a) 1 bit</p> <p>b) 2 bits</p> <p>c) 4 bits</p> <p>d) 8 bits</p>"},{"location":"1%20DATA%20REPRESENTATION/1.3%20DATA%20STORAGE%20AND%20COMPRESSION/1.3.2%20%20CALCULATING%20FILE%20SIZE/","title":"1.3.2  CALCULATING FILE SIZE","text":""},{"location":"1%20DATA%20REPRESENTATION/1.3%20DATA%20STORAGE%20AND%20COMPRESSION/1.3.2%20%20CALCULATING%20FILE%20SIZE/#132-calculating-file-size","title":"1.3.2 | CALCULATING FILE SIZE","text":""},{"location":"1%20DATA%20REPRESENTATION/1.3%20DATA%20STORAGE%20AND%20COMPRESSION/1.3.2%20%20CALCULATING%20FILE%20SIZE/#calculating-image-file-size","title":"CALCULATING IMAGE FILE SIZE","text":"IMAGE 1 : 8 x 8 pixels IMAGE 2 : 16 x 16 pixels <p>To calculate the file size of the two images above, firstly although only two colours have been used, lets presume a colour depth of 8 bit for both images.</p> <p>Image 1 calculation:</p> <p>Firstly; calculate the total amount of pixels used in the image</p> <p>8 pixels wide by 8 pixels tall: 8 x 8 = 64 (A total of 64 pixels used to represent the entire image)</p> <p>Secondly; multiply the total pixels used by the colour depth (8 bits have been used to represent the content of each pixel)</p> <p>64 pixels in total multiplied by 8(colour depth): 64 x 8 = **512</p> <p>Answer:** Image 1 has a file size of 512 bits</p> <p>Image 2 calculation: </p> <p>16 pixel by 16 pixels: 16 x 16 = 256</p> <p>256 pixels x 8 bit colour depth: 256 x 8 = 2048</p> <p>Answer: Image 2 has a file size of 2048 bits</p> <p>In practise images are much larges and the pixel density is much greater than the two example above.</p> <p></p> <p>IMAGE 3: Dimensions 1600 pixels x 1200 pixels : Bit Depth 24</p> <p>Follow the same steps to calculate the file size of image 3, this time convert the file size from bits too Megabytes.</p> <p>Step 1: Multiply the number of horizontal pixels by the number of vertical pixels: 1600 x 1200 = 1920000 pixels</p> <p>Step 2: Multiply the total pixels used by the colour/bit depth: 1920000 x 24 = **46080000 bits</p> <p>Step 3: Divide the answer from step 2 by 8 to give the number of bytes used: 46080000 / 8 = 5760000 bytes</p> <p>Step 4: Divide the number of bytes used by 1024 to give the value in Kilobytes: 5760000 / 1024 = 5625 Kilobytes</p> <p>Step 5: Divide the number of kilobytes used by 1024 to give the value in Megabytes: 5625 / 1024 = 5.4 Megabytes</p> <p>The original image 3 has a file size of 5.2Mb, this value excludes any metadata storage used and was the file size before being compressed for use over the internet</p> <p>QUESTIONS</p> <p>1: An image has the following properties:</p> <ul> <li>Dimensions 1024 pixels x 575 pixels</li> <li>Bit Depth 24</li> </ul> <p>Calculate the image size, show your workings at each stage and display the result in Mb.</p> <p>2: An image has the following properties:</p> <ul> <li>Dimensions 12 inch x 11 inch</li> <li>Bit Depth 16</li> <li>72 pixels per inch</li> </ul> <p>Calculate the image size, show your workings at each stage and display the result in Mb.</p> <p>3: Besides the size and bit depth of an image, what else could have an impact on the total file size?</p> <p>4:Give two situation where reducing the file size of an image is needed, explain the impact of doing this.</p>"},{"location":"10%20BOOLEAN%20LOGIC%E2%80%8B%20/10.1%20%20LOGIC%20SYMBOLS%20AND%20FUNCTIONS/","title":"10.1  LOGIC SYMBOLS AND FUNCTIONS","text":""},{"location":"10%20BOOLEAN%20LOGIC%E2%80%8B%20/10.1%20%20LOGIC%20SYMBOLS%20AND%20FUNCTIONS/#101-logic-symbols-and-functions","title":"10.1 | LOGIC SYMBOLS AND FUNCTIONS","text":"<p>WHAT ARE LOGIC GATES</p> <p>Logic gates are a major component of a computers hardware, there are usually thousands of logic gates in the circuits of computers. Logic gates act as a switch and control the flow of electricity through them depending on the combination of input they receive.</p> <p>The types of logic gates discussed in this section are:</p> <ul> <li>NOT Gate ( represented with \u0100)</li> <li>OR Gate (represented with A + B)</li> <li>NOR Gate</li> <li>AND Gate (represented with A x B or A \u00b7 B )</li> <li>NAND Gate</li> <li>XOR Gate ( Represented with \u2295 )</li> </ul> <p>Each of the various working of the logic gates can be illustrated in Truth Tables. As circuits get big and multiple logic gates or used together it is good practice to use truth tables to trace the outcomes. Most truth tables will replace the text ON and OFF with 1 and 0.</p> <p>THE NOT GATE</p> The NOT gate is the only gate with just one input. The NOT gate simply reverses the input, if the input is ON then the OUTPUT is OFF, if the input is OFF then the output is on. NOT GATE <p>The image above illustrates a NOT gate, it is the circle that symbolises the NOT and this circle is also used on other gates discussed later. Below is the truth table for the NOT gate.</p> <p></p> <p>NOT GATE TRUTH TABLE</p> <p>The NOT gate can be represented in Boolean Algebra by placing a combining overbar over the values to pass through a NOT gate, so NOT A can be represented as \u0100</p> <p>THE OR GATE</p> The OR gate will give an output value of ON if any of the inputs are ON. OR GATE The OR gate can be viewed as the mathematical equivalent of addition.  A + 0 = A A + A = A 0 + 0 = 0 A + \u0100 = 1 Notably different from normal mathematics as in boolean logic the above shows the the sum of a variable will equal the variable, for example 1 + 1 = 1 OR GATE TRUTH TABLE <p>THE NOR GATE</p> <p>The NOR Gate or NOT OR Gate will have an output if none of the inputs are 1. The NOR gate has a circle on the output to define the NOT part of the gate. You can see this as the opposite of an OR gate.</p> NOR GATE TRUTH TABLE NOR GATE <p>THE AND GATE</p> The AND gate will only give an output when both inputs are ON, in other works input one AND input two need to be ON to make the output ON. AND GATE AND GATE TRUTH TABLE The AND gate can be viewed are the mathematical equivalent to multiplication. A x 0 = 0 A x 1 = A A x A = A A x \u0100 = 0 <p>THE NAND GATE</p> <p>The NAND Gate or NOT AND Gate will have an output when the two inputs are not ON. Or with a three input NAND gate when all 3 inputs are not ON.</p> NAND GATE TRUTH TABLE THE NAND GATE <p>THE XOR GATE</p> <p>The XOR gate or eXclusive OR will only produce an output it the two inputs are different values.</p> XOR TRUTH TABLE THE XOR GATE <p>THE XNOR GATE</p> The exclusive not or will be 1 if both input values are the same. <p>LOGIC GATE QUESTIONS</p> <p>1: What does the NOT gate do?</p> <p>A. Outputs true if both inputs are true</p> <p>B. Inverts the input signal</p> <p>C. Outputs true if either input is true</p> <p>D. Outputs true if both inputs are false</p> <p>2: In an AND gate, the output is true when:</p> <p>A. Any one of the inputs is true</p> <p>B. None of the inputs are true</p> <p>C. Both inputs are true</p> <p>D. Both inputs are false</p> <p>3: Which gate will have a true output when either of its inputs is true?</p> <p>A. NOT</p> <p>B. AND</p> <p>C. OR</p> <p>D. NAND</p> <p>4: What is the output of a NAND gate when both inputs are true?</p> <p>A. True</p> <p>B. False</p> <p>C. The same as the input</p> <p>D. Can't be determined</p> <p>5: The NOR gate outputs true when:</p> <p>A. Both inputs are true</p> <p>B. Either input is true</p> <p>C. Neither input is true</p> <p>D. Inputs are different</p> <p>6: An XOR (Exclusive OR) gate outputs true if:</p> <p>A. Both inputs are true</p> <p>B. Both inputs are false</p> <p>C. The inputs are different</p> <p>D. The inputs are the same</p> <p>7: Which statement is true about the OR gate?</p> <p>A. It outputs false only when both inputs are false</p> <p>B. It always outputs true</p> <p>C. It outputs true only when both inputs are true</p> <p>D. It inverts the input signal</p> <p>8: If an AND gate has an input of 1 and 0, the output will be:</p> <p>A. 1</p> <p>B. 0</p> <p>C. The same as the input</p> <p>D. Can't be determined</p> <p>9: In a NAND gate, if one input is 0 and the other is 1, the output will be:</p> <p>A. 1</p> <p>B. 0</p> <p>C. The same as the input</p> <p>D. Inverted</p> <p>10: Which gate behaves like an OR gate followed by a NOT gate?</p> <p>A. AND</p> <p>B. XOR</p> <p>C. NOR</p> <p>D. NAND</p>"},{"location":"10%20BOOLEAN%20LOGIC%E2%80%8B%20/10.2%20%20USING%20LOGIC%20GATES/","title":"10.2  USING LOGIC GATES","text":""},{"location":"10%20BOOLEAN%20LOGIC%E2%80%8B%20/10.2%20%20USING%20LOGIC%20GATES/#102-using-logic-gates","title":"10.2 | USING LOGIC GATES","text":""},{"location":"10%20BOOLEAN%20LOGIC%E2%80%8B%20/10.2%20%20USING%20LOGIC%20GATES/#what-is-a-problem-statement","title":"WHAT IS A PROBLEM STATEMENT","text":"<p>A problem statement typically defines a specific scenario or requirement that needs to be addressed or solved using a combination of logic gates. It outlines the conditions and desired outcomes, which can be translated into a logical circuit using appropriate gates. The problem statement serves as the basis for designing a digital circuit that meets the specified criteria.</p> <p>Example of a Problem Statement Design a security system logic circuit for a storage room that triggers an alarm under two conditions: either when motion is detected inside the room, or when the door is opened without a security code being entered. However, the alarm should not sound if the correct security code is entered, regardless of motion detection or door status.</p>"},{"location":"10%20BOOLEAN%20LOGIC%E2%80%8B%20/10.2%20%20USING%20LOGIC%20GATES/#what-is-a-logic-expression","title":"WHAT IS A LOGIC EXPRESSION","text":"<p>A logic expression, also known as a Boolean expression, is a mathematical notation that specifies a combination of logic operations performed on logical variables. In the realm of computer science and digital electronics, these expressions are used to represent the function of logic gates and circuits. Here are some characteristics of Logic Expressions.</p> <ul> <li>Based on Boolean Algebra | Logic expressions are rooted in Boolean algebra, a branch of algebra that deals with true and false values, typically represented as 1 and 0, respectively.</li> <li>Use of Logical Operators | These expressions employ operators such as AND (\u22c5), OR (+), NOT (\u00ac), NAND, NOR, XOR, and XNOR to combine one or more logic variables.</li> <li>Variables and Constants | The expressions consist of variables (like A, B, C) that represent inputs and outputs of logic gates, and constants (0 for false, 1 for true).</li> <li>Represent Logic Circuits | Every logic circuit can be described by a logic expression, and conversely, every logic expression can be implemented as a logic circuit.</li> </ul> <p>Example For a simple AND gate with two inputs A and B, the logic expression is:</p> <p>Expression: Y = A AND B In Boolean Notation: Y = A \u22c5 B</p>"},{"location":"10%20BOOLEAN%20LOGIC%E2%80%8B%20/10.2%20%20USING%20LOGIC%20GATES/#what-is-a-logic-circuit","title":"WHAT IS A LOGIC CIRCUIT","text":"<p>A logic circuit is a physical arrangement of logic gates designed to perform a specific logical operation. It's the cornerstone of digital electronics, found in computers, calculators, and many other electronic devices.</p> <ul> <li>Based on Binary System | Logic circuits operate using binary numbers (0s and 1s), representing two states: ON (1) and OFF (0).</li> <li>Composed of Logic Gates | These are the basic building blocks of logic circuits. Gates like AND, OR, NOT, NAND, NOR, XOR, and XNOR process binary inputs to produce a binary output.</li> <li>Perform Logical Operations | Each circuit performs a specific function, determined by the arrangement and type of gates used.</li> <li>Can Be Simple or Complex | They range from basic circuits with a single gate to complex integrated circuits with millions of gates.</li> <li>Used in Computing and Digital Electronics | Logic circuits form the basis of the central processing unit (CPU), memory, and other components in computers.</li> </ul>"},{"location":"10%20BOOLEAN%20LOGIC%E2%80%8B%20/10.2%20%20USING%20LOGIC%20GATES/#what-is-a-truth-table","title":"WHAT IS A TRUTH TABLE","text":"<p>A truth table is a mathematical table used to determine whether a logic statement is true or false. In the context of digital electronics and computer science, it is primarily used to represent the output of a logic circuit for every possible combination of inputs.</p> <p>As can be seen on the previous page each logic can be represented with their own truth table. The first thing you should notice is that the input values are listed in a logical binary order, this ensures that you do not make any mistakes when creating the input values and helps maintain consistency so all truth tables are easy to read. For n inputs, there will be 2^n combinations.</p> <p></p> <p>Notice the pattern when listing binary, the left hand column will always read down 1 zero then 1 one, the next column will be 2 zero's then 2 one's the third column 4 zero's then 4 ones, this pattern continues as you add column. The other reason to list the binary this way is if you convert the binary value to normal numbers then you are simply counting from Zero upwards. You can also work out the total possible input combinations by doing 'Number of inputs ^2'. For example the logic gate in the diagram above has 2 inputs so 2^2=4, there is a total of 4 possible combinations to the input values.</p> <p>NOTE: MANY STUDENTS LOSE MARKS OR GET THE ANSWER WRONG BECAUSE THEY DO NOT LIST THE INPUTS USING THIS METHOD.</p> <p>CREATING A LOGIC CIRCUIT AND TRUTH TABLE</p> <p>Creating a logic circuit involves several steps, from understanding the problem to designing and testing the circuit.</p> <ol> <li>Understand the Scenario | Carefully read the problem statement to understand what the circuit is supposed to achieve. Identify the inputs and the desired output.</li> <li>Determine the Required Logic | Based on the scenario, decide which logical operations (AND, OR, NOT, etc.) are needed to achieve the desired output.</li> <li>Select the Appropriate Gates | Choose the logic gates that will fulfil the required logical operations.</li> <li>Draw the Circuit Diagram | Sketch a diagram of the circuit. Place the gates in the correct arrangement and connect them with lines representing the flow of inputs and outputs.</li> <li>Label Inputs and Outputs | Clearly label all inputs and the output in the diagram.</li> <li>Create a Truth Table | This is a table showing all possible combinations of inputs and their corresponding outputs. It helps in verifying the functionality of your circuit.</li> <li>Test and Validate | Check if the circuit works as intended for all input combinations. You can use simulation software for complex circuits.</li> </ol>"},{"location":"10%20BOOLEAN%20LOGIC%E2%80%8B%20/10.2%20%20USING%20LOGIC%20GATES/#create-a-logic-circuit-from-a-truth-table","title":"CREATE A LOGIC CIRCUIT FROM A TRUTH TABLE","text":"<p>EXAMPLE PROBLEM STATEMENT 1</p> <p>Create a circuit that turns on a light (output) when it is either night-time (input A) or the room is occupied (input B), but not both.</p> <ol> <li>Understand the Scenario | You need a circuit with two inputs (night-time and room occupancy) and one output (light).</li> <li>Determine the Required Logic | The light should be on if either one condition is true, but not both. This is an exclusive OR operation.</li> <li>Select the Appropriate Gates | Choose an XOR gate.</li> <li>Draw the Circuit Diagram | Draw a diagram with two inputs leading to an XOR gate, and the output from this gate is the light.</li> <li>Label Inputs and Outputs | Label the inputs as A (night-time) and B (room occupancy) and the output as the light.</li> </ol> <p></p> <p>6: Create a Truth Table | The truth table below is a method of visually displaying the outcomes of a logic gate or all of the      possible outcomes of a logic circuit.  </p> A (NIGHT TIME) B (OCCUPIED) X = LIGHT (A XOR B) O O O O 1 1 1 O 1 1 1 O <ol> <li>Test and Validate | Check the circuit against all possible input combinations to ensure it works correctly.</li> </ol> <p>The above example is a simple solution to a simple problem statement that only requires the use of one logic gate. In the next example we look at a slightly more complex problem statement and provide tips on how to break down the problem to create a logic circuit and truth table.</p>"},{"location":"10%20BOOLEAN%20LOGIC%E2%80%8B%20/10.2%20%20USING%20LOGIC%20GATES/#example-problem-statement-2","title":"EXAMPLE PROBLEM STATEMENT 2","text":"<p>Design a security system for a storage room that triggers an alarm under two conditions: either when motion is detected inside the room, or when the door is opened without a security code being entered. However, the alarm should not sound if the correct security code is entered, regardless of motion detection or door status.</p> <p>Breaking Down the Problem Statement</p> <ul> <li>Motion Detection | If motion is detected, the alarm should be triggered.</li> <li>Door Status and Security Code | If the door is opened without entering the correct security code, the alarm should be triggered.</li> <li>Override Condition | If the correct security code is entered, the alarm should not be triggered, irrespective of motion or door status.</li> </ul> <p>INPUTS M (Motion Detected): 1 if motion is detected, 0 otherwise. D (Door Opened): 1 if the door is opened, 0 otherwise. C (Correct Code Entered): 1 if the correct code is entered, 0 otherwise.</p> <p>OUTPUT Alarm (A): The alarm system. (1 if the alarm should be triggered, 0 if it should not) Logic Circuit Design:</p> <p>WORKING OUT WHAT GATES ARE NEEDED Step 1 | Combine Motion and Door Status</p> <ul> <li>Logic Needed | The alarm should trigger if either motion is detected or the door is opened.</li> <li>Gate Used | OR gate.</li> <li>Reasoning | An OR gate outputs 1 (true) if either of its inputs is 1. This matches our need to trigger the alarm if either motion is detected (M = 1) or the door is opened (D = 1).</li> <li>Logic Expression | M OR D</li> </ul> <p>Step 2 | Consider the Security Code</p> <ul> <li>Logic Needed | The alarm should not trigger if the correct security code is entered.</li> <li>Gate Used | NOT gate.</li> <li>Reasoning | A NOT gate inverts its input. If the correct code is entered (C = 1), the NOT gate will output 0, indicating that the alarm should not trigger.</li> <li>Logic Expression | NOT C</li> </ul> <p>Step 3 | Combine the Conditions</p> <ul> <li>Logic Needed | The alarm should trigger based on motion or door status, but this should be overridden if the correct code is entered.</li> <li>Gate Used | AND gate.</li> <li>Reasoning | An AND gate outputs 1 only if both its inputs are 1. By connecting the output of the OR gate (M OR D) and the output of the NOT gate (NOT C) to an AND gate, the alarm will trigger only if there is motion or the door is opened and the correct code is not entered.</li> <li>Final Logic Expression | (M OR D) AND (NOT C)</li> </ul> <p></p> <p>Notice in the logic diagram above A and B have been added as intermediate values, doing this is good practice as it allows you to methodically label and trace the circuit in a truth table. \u200b  Create a Truth Table | The truth table below is a method of visually displaying the outcomes of a logic gate or all of the      possible outcomes of a logic circuit. \u200b</p> M D C A (M OR D) B (NOT C) X - ALARM (A AND B) O O O O 1 O O O 1 O O O O 1 O 1 1 1 O 1 1 1 O O 1 O O 1 1 1 1 O 1 1 O O 1 1 O 1 1 1 1 1 1 1 O O <p>When listing binary values for the inputs in a truth table, it's important to follow a logical and systematic order. For a scenario with three inputs, you should list the binary values starting from 000 and incrementing up to 111. This sequence follows the standard binary counting method, ensuring that all possible combinations of inputs are covered systematically. Be aware that failing to list the binary values in this correct order could result in your answer being marked incorrect. This methodical approach is essential for accuracy and completeness in your work with logic circuits.</p>"},{"location":"10%20BOOLEAN%20LOGIC%E2%80%8B%20/10.2%20%20USING%20LOGIC%20GATES/#example-problem-statement-3","title":"EXAMPLE PROBLEM STATEMENT 3","text":"<p>Design a control system for a specialized manufacturing robot. The robot should activate a specific function (X) based on the following conditions: The function should be active if either the safety sensor (A) is not triggered or the manual override (B) is engaged, but not if the system is in maintenance mode (C). Additionally, this function should also be active if both the safety sensor is triggered and the system is not in maintenance mode, but not if the manual override is disengaged.</p> <p>Breaking Down the Problem Statement INPUTS</p> <ul> <li>A (Safety Sensor) | A represents the safety sensor (1 if triggered, 0 if not).</li> <li>B (Manual Override) | B represents the manual override (1 if engaged, 0 if not).</li> <li>C (Maintenance Mode) | C represents the maintenance mode (1 if in maintenance, 0 if not).</li> </ul> <p>OUTPUT</p> <ul> <li>Activate robot (X) | 1 if the system should activate, 0 if not.</li> </ul> <p>WORKING OUT WHAT GATES ARE NEEDED Step 1 | Safety sensor or override</p> <ul> <li>Logic Needed | Check if the safety sensor is not triggered or the manual override is engaged. Ensure the system is not in maintenance mode</li> <li>Gate Used | NOT gate for A / OR gate for NOT A and B / NOR gate combining the output of the OR gate with C.</li> <li>Logic Expression | ((NOT A OR B) NOR C)</li> </ul> <p>Step 2 | Safety sensor and not in maintenance mode</p> <ul> <li>Logic Needed | Check if both the safety sensor is triggered and the system is not in maintenance mode. Ensure the manual override is not disengaged.</li> <li>Gate Used | AND gate for A and C / NOR gate combining the output of the AND gate with B.</li> <li>Logic Expression | ((A AND C) NOR B)</li> </ul> <p>Step 3 | Combining both parts</p> <ul> <li>Logic Needed | First Part NAND Second Part. Combine the two conditions: (1) safety sensor not triggered/manual override engaged, not in maintenance, and (2) safety sensor triggered, not in maintenance, manual override not disengaged.</li> <li>Gate Used | NAND gate combining the outputs of the two NOR gates.</li> <li>Final Logic Expression | X=((NOT A OR B) NOR C) NAND ((A AND C) NOR B)</li> </ul> <p></p> <p>The truth table below represents the circuit - remember to list the intermediate values (D, E, F, G, H) in your truth tables to avoid simple mistakes being made.</p> <p></p> <p>CREATING A LOGIC DIAGRAM FROM A LOGIC TABLE</p> <p>To create a logic circuit from a given truth table you first need to create a boolean expression. To create a boolean expression you only need to look at the values from the truth table that have an output of 1. </p> A B C X 1 1 1 1 1 1 1 1 1 1 1 1 1 1 <p>Step 1: Identify the Rows with Output '1' Look at the rows in the truth table where the output (Y) is 1. These rows will help us determine the logic needed for the circuit.</p> <p>From the table above, the rows where X is '1' are:</p> <ul> <li>A = 1, B = 0, C = 0</li> <li>A = 1, B = 1, C = 1</li> </ul> <p>Step 2: Write the Boolean Expression Writing the boolean expression for each of the scenarios where X = 1. There are three rules to follow.</p> <ul> <li>If the Value of the input is 0 then use a NOT gate</li> <li>AND the values of each line together</li> <li>OR each or the lines together</li> </ul> <p>So for the first line A = 1, B = 0, C = 0 we can create the boolean expression of: ((A AND NOT B) AND NOT C))</p> <p>For the second line A = 1, B = 1, C = 1 we can create the boolean expression of: ((A AND B) AND C)</p> <p>Next - combine the two statements together with an OR gate</p> <p>((A AND NOT B) AND NOT C)) OR ((A AND B) AND C)</p> <p>Now you are ready to create the Logic circuit</p> <p></p> <p></p> <p>SCENARIO Design a digital system for a library's automated lighting and security system. The lights should turn on if either it is dark outside (D) or if there are people in the library (P). The security alarm should be activated if it is dark and the library is supposed to be closed (C), but there are still people inside (P).</p> <p>INPUTS</p> <ul> <li>Dark Outside (D): 1 if it's dark outside, 0 otherwise.</li> <li>People in Library (P): 1 if people are present, 0 if the library is empty.</li> <li>Library Closed (C): 1 if the library is supposed to be closed, 0 otherwise.</li> </ul> <p>OUTPUTS</p> <ul> <li>Lights (L): 1 if lights should be on, 0 if off.</li> <li>Security Alarm (S): 1 if the alarm should be activated, 0 if not.</li> </ul> <p>TASKS</p> <ol> <li>Create the 2 Logic Expressions for this scenario</li> <li>Create a truth table for this scenario</li> <li>Create the logic circuit for this scenario</li> </ol>"},{"location":"8%20Programming/8.1%20PROGRAMMING%20CONCEPTS/","title":"8.1 PROGRAMMING CONCEPTS","text":""},{"location":"8%20Programming/8.1%20PROGRAMMING%20CONCEPTS/#81-programming-concepts","title":"8.1 PROGRAMMING CONCEPTS","text":""},{"location":"8%20Programming/8.1%20PROGRAMMING%20CONCEPTS/#section-1-declare-and-use-variables-and-constants","title":"SECTION 1 | DECLARE AND USE VARIABLES AND CONSTANTS","text":"<p>What are Variables and Constants? Variables are named storage locations in your computer's memory that can hold different values throughout the execution of a program. Think of variables as containers that store information your program can use and modify.</p> <p>Constants are similar to variables but, once set, their value cannot change throughout the execution of your program. They are the \"constants\" in your coding equation, like the speed of light in physics.</p> <p>Declaring Variables and Constants To declare a variable or constant, you specify its type and give it a name. For example, in Python, you can declare a variable by simply typing age = 21. Here, age is a variable that stores the integer value 21.</p> <p>Declaring a constant in languages like Python involves naming conventions, such as all-uppercase letters with underscores separating words, e.g., MAX_SPEED = 120, because Python does not have a specific syntax for declaring constants.</p> <p>Why Use Them? Variables and constants make your code:</p> <ul> <li> <p>Readable | Using meaningful names makes your code easier to understand.</p> </li> <li> <p>Maintainable | Easy to update and modify your program.</p> </li> <li> <p>Reusable | Allows for the same code to be used with different data.</p> </li> <li> <p>Example declaring variables in Pseudocode</p> </li> <li> <p>integer_example \u2190 5</p> </li> <li>real_example \u2190 3.14</li> <li>char_example \u2190 'A'</li> <li>string_example \u2190 \"Hello, World\"</li> <li>boolean_example \u2190 TRUE</li> </ul> <p>### SECTION 2 | UNDERSTAND AND USE THE BASIC DATA TYPES</p> <p>Every piece of data in computer programs has a type. The basic data types include:</p> <ul> <li>Integer | Whole numbers, e.g., -10, 0, 25.</li> <li>Real | Numbers with fractional parts, also known as floating-point numbers, e.g., -3.14, 0.0, 2.72.</li> <li>Char |A single character, like 'a', 'B', or '3'.</li> <li>String | A sequence of characters, e.g., \"Hello, world!\".</li> <li>Boolean | Represents truth values, typically True or False. A Boolean can only be1 of a maximum of 2 values - True/False, On/Off, 1/0, Yes/No</li> </ul> <p>Choosing the Right Data Type   Selecting the appropriate data type is crucial for:</p> <ul> <li>Efficiency | Using the correct type makes your program run faster and use memory more efficiently.</li> <li>Accuracy | Ensures that the data is represented in a way that makes sense for the intended operation.</li> </ul> <p>### SECTION 3 | UNDERSTAND AND USE INPUT AND OUTPUT</p> <p>Input is how you get data from the user into your program. It can come from various sources like a keyboard, a file, or button press.</p> Python<pre><code>#INPUT Example - Asking a user for their age and storing it in a variable.\n\nage = input(\"Enter your age: \")\n\n#OUTPUT Example - Displaying a user's age.\nprint(\"Your age is\", age)\n</code></pre> Text Only<pre><code>OUTPUT \"Enter your age: \"\nINPUT age\nOUTPUT \"Your age is \", age\n</code></pre> <p>Importance of Input and Output</p> <ul> <li>Interaction | Allows your program to interact with users, making it dynamic and responsive.</li> <li>Data Processing | Enables your program to process user-provided data and produce results.</li> </ul>"},{"location":"8%20Programming/8.1%20PROGRAMMING%20CONCEPTS/#section-4-understand-and-use-the-concept-of-sequence","title":"SECTION 4 | UNDERSTAND AND USE THE CONCEPT OF SEQUENCE","text":"<p>Structured programming is a programming paradigm aimed at improving the clarity, quality, and development time of a computer program by making extensive use of subroutines, block structures, for loops, and if/else decision-making structures. This section covers two fundamental concepts: sequence and selection.</p> <p>A sequence in programming refers to the execution of instructions in the order they are written - from top to bottom in a script. This linear progression makes understanding the flow of a program straightforward.</p> Python<pre><code># Sequence Example\nprint(\"Start Program\")\nage = 20\nage = age + 1\nprint(\"Age next year:\", age)\nprint(\"End Program\")\n</code></pre> Text Only<pre><code>// Sequence Example\nOUTPUT \"Start Program\"\nage \u2190 20\nage \u2190 age + 1\nOUTPUT \"Age next year: \", age\nOUTPUT \"End Program\"\n</code></pre>"},{"location":"8%20Programming/8.1%20PROGRAMMING%20CONCEPTS/#section-4-understand-and-use-the-concept-of-selection","title":"SECTION 4 | UNDERSTAND AND USE THE CONCEPT OF SELECTION","text":"<p>Selection uses conditions to decide which pieces of code to execute. This decision-making process allows programs to take different actions based on inputs or other conditions. This examination board generally uses two different methods of selection, the 'IF' statement and the 'CASE' statement.</p> <p>IF STATEMENTS Usage:</p> <ul> <li>IF statements are used to execute a block of code if a specified condition is true. They can also include else and elif (else if) clauses to handle multiple conditions and outcomes.</li> <li>Ideal for complex conditions that involve logical operators (AND, OR, NOT) or comparisons that are not solely based on a single variable's value.</li> <li>Well-suited for scenarios where the conditions for decision-making are not exhaustive or cannot be easily enumerated.</li> </ul> <p>Characteristics:</p> <ul> <li>Flexibility in evaluating conditions that can be expressions involving variables, function calls, and logical operations.</li> <li>Can become cumbersome or less readable with many elif clauses, making code harder to follow.</li> <li>Directly supports execution of alternative blocks of code (else clause).</li> </ul> Python<pre><code># IF Statement Example\nscore = 75\nif score &gt;= 50:\n    print(\"You passed!\")\nelse:\n    print(\"Try again!\")\n</code></pre> Text Only<pre><code>// IF Statement Example\nscore \u2190 75\nIF score &gt;= 50 THEN\n    OUTPUT \"You passed!\"\nELSE\n    OUTPUT \"Try again!\"\nENDIF\n</code></pre> <p>CASE STATEMENTS (or Match Statements in Python 3.10+) Usage</p> <ul> <li>Used to select one of many blocks of code to execute, based on the value of a single variable.</li> <li>Ideal for when you have a variable that can take one out of a small set of possible values and you want to execute different code for each value.</li> <li>Makes code cleaner and more readable when dealing with multiple discrete values that a single variable can take.</li> </ul> <p>Characteristics</p> <ul> <li>More readable and concise for enumerated conditions (e.g., days of the week, specific known values).</li> <li>Cannot directly handle complex conditions involving logical operators across multiple variables without additional nesting or checks.</li> <li>Python's match statement supports pattern matching, which is more powerful than traditional CASE statements, allowing for matching types, sequences, and more.</li> </ul> Python<pre><code>number = 2    \nmatch number:\n        case 1:\n            print \"One\"\n        case 2:\n            print \"Two\"\n        case _:\n           print \"Something else\"\n</code></pre> Text Only<pre><code>// CASE Statement Example\nday_number \u2190 3\nCASE OF day_number\n    1: day \u2190 \"Monday\"\n    2: day \u2190 \"Tuesday\"\n    3: day \u2190 \"Wednesday\"\n    OTHERWISE: day \u2190 \"Unknown\"\nENDCASE\nOUTPUT \"Day is: \", day\n</code></pre> <p>DIFFERENCES</p> <ul> <li>Complexity of Conditions | IF statements are better for complex logical conditions, whereas CASE (or match) statements are ideal for checking one variable against a series of values.</li> <li>Readability | CASE statements can enhance readability when dealing with a clear enumeration of simple conditions. IF statements can become unwieldy with too many elif clauses but offer more flexibility in condition evaluation.</li> <li>Use Cases | Use IF statements when conditions are varied and involve multiple variables or complex logic. Use CASE statements for simpler, value-based decision paths on a single variable.</li> </ul> <p>Example - The below statement the below statement compares if the temperature is greater than 30, or less then 10, the else part of the statement would be used if it was any other value:</p> <p>temperature = 30 if temperature &gt; 30:   print(\"It's hot outside.\") elif temperature &lt; 10:   print(\"It's cold outside.\") else:   print(\"It's nice outside.\")</p> <p>Example - The below statement the below statement compares if the status_code is exactly one of the values stated.</p> <p>status_code = 404 match status_code:   case 200:     print(\"Success!\")   case 404:     print(\"Not Found.\")   case _:     print(\"Some other error.\") \u200b The choice between IF and CASE statements largely depends on the specific needs of your code, the complexity of the conditions you're evaluating, and the need for readability and maintainability of your code. Python's match statement adds extra versatility to the traditional concept of CASE statements, bridging some gaps between these two control flow mechanisms</p>"},{"location":"8%20Programming/8.1%20PROGRAMMING%20CONCEPTS/#section-5-understand-and-use-the-concept-of-iteration","title":"SECTION 5 | UNDERSTAND AND USE THE CONCEPT OF ITERATION","text":"<p>Iteration in programming refers to the repetition of a block of code as long as a specified condition is met. It's a fundamental concept that enables programs to perform tasks multiple times efficiently. There are three main types of loops used to implement iteration: count-controlled loops, pre-condition loops, and post-condition loops.</p> <p>Count-Controlled Loops Usage Count-controlled loops repeat a block of code a specific number of times. They are often used when the exact number of iterations is known ahead of time, such as processing each item in a fixed-size collection.</p> Python<pre><code># Looping through a range of numbers\nfor i in range(5):  # Repeats 5 times, from 0 to 4\n    print(\"This is count-controlled loop iteration\", i)\n</code></pre> Text Only<pre><code>FOR i \u2190 0 TO 4\n    OUTPUT \"This is count-controlled loop iteration \", i\nNEXT i\n</code></pre> <p>Pre-Condition Loops Usage Pre-condition loops (while loops) execute a block of code as long as a pre-defined condition is true. They are suitable when the number of iterations is not known before the loop starts, such as reading until an end-of-file marker is found.</p> Python<pre><code># Looping until a condition is met\ncount = 0\nwhile count &lt; 5:\n    print(\"This is pre-condition loop iteration\", count)\n    count += 1\n</code></pre> Text Only<pre><code>count \u2190 0\nWHILE count &lt; 5 DO\n    OUTPUT \"This is pre-condition loop iteration \", count\n    count \u2190 count + 1\nENDWHILE\n</code></pre> <p>Post-Condition Loops Usage Post-condition loops execute the loop body first and then check the condition to decide whether to continue. They guarantee that the loop body is executed at least once. This is useful in scenarios where the loop must execute at least once, such as displaying a menu and processing user input.</p> <p>Python Example: Python does not have a built-in post-condition loop construct, but you can mimic its behaviour using a while loop.</p> Python<pre><code># Simulating a post-condition loop\ncondition = False\nwhile True:\n    print(\"This loop runs at least once.\")\n    condition = input(\"Continue? (yes/no): \") != \"yes\"\n    if condition:\n        break\n</code></pre> Text Only<pre><code>REPEAT\n    OUTPUT \"This loop runs at least once.\"\n    INPUT condition, \"Continue? (yes/no): \"\nUNTIL condition \u2260 \"yes\"\n</code></pre> <p>Iterations are a powerful concept in programming, allowing for efficient repetition of code blocks. Count-controlled loops are ideal for a known number of iterations, pre-condition loops for uncertain iterations determined by conditions evaluated before entering the loop, and post-condition loops for scenarios where at least one iteration is required, with further iterations dependent on a condition checked after the loop's body executes</p> LOOP TYPE DESCRIPTION USE CASE PYTHON PSEUDOCODE Count-Controlled Iterates a specific number of times. When the number of iterations is known ahead of time for i in range(5): FOR i \u2190 0 TO 4 Pre-Condition Continues as long as a condition is true. When the number of iterations is not known before the loop starts. while condition: WHILE condition DO Post-Condition Executes at least once, then continues based on a condition. When the loop must run at least once and then continue based on a condition evaluated after each iteration. while True: with a break REPEAT ... UNTIL condition <p>This table highlights the key characteristics and use cases for each loop type, along with examples in both Python and the CIE pseudocode syntax.</p>"},{"location":"8%20Programming/8.1%20PROGRAMMING%20CONCEPTS/#section-6-understand-and-use-the-concepts-of-totalling-and-counting","title":"SECTION 6 | UNDERSTAND AND USE THE CONCEPTS OF TOTALLING AND COUNTING","text":"<p>In programming, \"totalling\" and \"counting\" are fundamental concepts used to aggregate or summarize data. \"Totalling\" involves summing up numbers to obtain a total, while \"counting\" refers to incrementally increasing a counter to track the quantity of items or occurrences. These concepts are crucial for data analysis, reporting, and decision-making processes in software applications.</p> <p>Totalling Totalling is the process of accumulating a sum over a set of numbers. This is commonly used in scenarios where you need to calculate the total score, the total amount of sales, or any other cumulative metric.</p> Python<pre><code># Calculating the total of a list of numbers\nnumbers = [10, 20, 30, 40]\ntotal = 0\nfor number in numbers:\n    total += number\nprint(\"Total is:\", total)\n</code></pre> Text Only<pre><code>numbers: ARRAY[1:4] OF INTEGER = [10, 20, 30, 40]\ntotal \u2190 0\nFOR i \u2190 1 TO 4\n    total \u2190 total + numbers[i]\nENDFOR\nOUTPUT \"Total is: \", total\n</code></pre> <p>Counting Counting involves incrementally updating a counter to track the number of occurrences of an event, such as counting the number of items that meet a specific condition.</p> Python<pre><code># Counting the number of even numbers in a list\nnumbers = [1, 2, 3, 4, 5, 6]\ncount = 0\nfor number in numbers:\n    if number % 2 == 0:\n        count += 1\nprint(\"Count of even numbers is:\", count)\n</code></pre> Text Only<pre><code>numbers: ARRAY[1:6] OF INTEGER = [1, 2, 3, 4, 5, 6]\ncount \u2190 0\nFOR i \u2190 1 TO 6\n    IF numbers[i] MOD 2 = 0 THEN\n        count \u2190 count + 1\n    ENDIF\nENDFOR\nOUTPUT \"Count of even numbers is: \", count\n</code></pre> <p>Differences and Use Cases Totalling is used when you need to accumulate a numeric value, such as calculating the sum of all elements in a list. It is often used in financial applications, statistical calculations, and anywhere you need to aggregate numeric data.</p> <p>Counting is used to determine the quantity of items that meet a specific criterion. This is useful in scenarios where you need to track occurrences, such as counting the number of passing grades, the number of positive reviews, or any condition-based metric.</p> <p>Both concepts are essential for data processing and analysis, enabling programmers to derive meaningful insights and metrics from data sets. Understanding how to implement totalling and counting effectively can greatly enhance a program's ability to process and summarize data.</p>"},{"location":"8%20Programming/8.1%20PROGRAMMING%20CONCEPTS/#section-7-understand-and-use-the-concept-of-string-handling","title":"SECTION 7 | UNDERSTAND AND USE THE CONCEPT OF STRING HANDLING","text":"<p>String handling involves manipulating text data in various ways, such as searching for substrings, converting between uppercase and lowercase, and extracting parts of strings. Effective string handling is crucial for data processing, user input manipulation, and many other programming tasks.</p> <p>Basic String Operations</p> <ul> <li>Length | Determine the length of a string.</li> <li>Substring | Extract a portion of a string.</li> <li>Concatenation | Join two or more strings together.</li> <li>Conversion | Change the case of a string (e.g., to uppercase or lowercase).</li> <li>Comparison |Compare two strings for equality or lexical order.</li> </ul> <p>Python Examples and Corresponding Pseudocode (CIE)</p> Python<pre><code>#LENGTH\nmy_string = \"Hello, World!\"\nprint(len(my_string))\n\n#SUBSTRING\nmy_string = \"Hello, World!\"\nprint(my_string[7:12])  \n#The output would be 'World'\n\n#CONCATENATION\ngreeting = \"Hello\"\nname = \"Alice\"\nmessage = greeting + \", \" + name + \"!\"\nprint(message)\n\n#CONVERSION\nmy_string = \"Hello, World!\"\nprint(my_string.upper())\nprint(my_string.lower())\n\n#COMPARISION\nstring1 = \"hello\"\nstring2 = \"world\"\nprint(string1 == string2)  # False\n</code></pre> Text Only<pre><code>#LENGTH\nmyString \u2190 \"Hello, World!\"\nOUTPUT LENGTH(myString)\n\n#SUBSTRING\nmyString \u2190 \"Hello, World!\"\nOUTPUT myString[7:12]\n#The output would be 'World'\n\n#CONCATENATION\ngreeting \u2190 \"Hello\"\nname \u2190 \"Alice\"\nmessage \u2190 greeting + \", \" + name + \"!\"\nOUTPUT message\n\n#CONVERSION\nmyString \u2190 \"Hello, World!\"\nOUTPUT TOUPPERCASE(myString)\nOUTPUT TOLOWERCASE(myString)\u200b\n\n#COMPARISION\nstring1 \u2190 \"hello\"\nstring2 \u2190 \"world\"\nIF string1 = string2 THEN\n    OUTPUT \"True\"\nELSE\n    OUTPUT \"False\"\nENDIF\n</code></pre> <p>String handling is a powerful tool in programming, enabling the manipulation and analysis of textual data. Understanding these basic operations\u2014length, substring extraction, concatenation, conversion, and comparison\u2014is essential for processing and utilising strings effectively in any programming task. The examples provided in both Python and pseudocode demonstrate how these operations can be implemented, showcasing the versatility and necessity of string handling in programming.</p>"},{"location":"8%20Programming/8.1%282%29%20PROGRAMMING%20CONCEPTS%20CONTINUED/","title":"8.1(2) PROGRAMMING CONCEPTS","text":""},{"location":"8%20Programming/8.1%282%29%20PROGRAMMING%20CONCEPTS%20CONTINUED/#812-programming-concepts-continued","title":"8.1(2) PROGRAMMING CONCEPTS CONTINUED","text":""},{"location":"8%20Programming/8.1%282%29%20PROGRAMMING%20CONCEPTS%20CONTINUED/#section-1-understand-and-use-arithmetic-logical-and-boolean-operators","title":"SECTION 1 | UNDERSTAND AND USE ARITHMETIC, LOGICAL AND BOOLEAN OPERATORS","text":"<p>This section covers the fundamental operators used in programming: arithmetic, logical, and Boolean operators. Operators are symbols that tell the compiler or interpreter to perform specific mathematical, logical, or relational operations and produce a final result.</p> <p>ARITHMETIC OPERATORS</p> <ul> <li>Addition (+) | Adds two operands. Example: 5 + 3 results in 8.</li> <li>Subtraction (-) | Subtracts the second operand from the first. Example: 5 - 3 results in 2.</li> <li>Division (/) | Divides the first operand by the second. Example: 10 / 2 results in 5.</li> <li>Multiplication (*) | Multiplies two operands. Example: 5 * 3 results in 15.</li> <li>Raised to the Power of (^) | Raises the first operand to the power of the second. Example: 2 ^ 3 results in 8.</li> <li>Modulus (MOD) | Returns the remainder of dividing the first operand by the second. Example: 10 MOD 3 results in 1.</li> <li>Integer Division (DIV) | Divides the first operand by the second, but returns only the integer part of the quotient. Example: 10 DIV 3 results in 3.</li> </ul> Python<pre><code>#Addition\nresult = 5 + 3\nprint(result)  # Outputs: 8\n\n#Subtraction\nresult = 5 - 3\nprint(result)  # Outputs: 2\n\n#Division\nresult = 10 / 2\nprint(result)  # Outputs: 5.0\n\n#Multiplication\nresult = 5 * 3\nprint(result)  # Outputs: 15\n\n#Raised to the power of\nresult = 2 ** 3  # In Python, ** is used for exponentiation\nprint(result)  # Outputs: 8\n\n#Modulus\nresult = 10 % 3  # In Python, % is used for modulus\nprint(result)  # Outputs: 1\n\n#Integer Division\nresult = 10 // 3  # In Python, // is used for integer division\nprint(result)  # Outputs: 3\n</code></pre> Text Only<pre><code>#Addition\nRESULT \u2190 5 + 3\nOUTPUT RESULT  // Outputs: 8\n\n#Subtraction\nRESULT \u2190 5 - 3\nOUTPUT RESULT  // Outputs: 2\n\n#Division\nRESULT \u2190 10 / 2\nOUTPUT RESULT  // Outputs: 5\n\n#Multiplication\nRESULT \u2190 5 * 3\nOUTPUT RESULT  // Outputs: 15\n\n#Raised to the power of\nRESULT \u2190 2 ^ 3\nOUTPUT RESULT  // Outputs: 8\n\n#Modulus\nRESULT \u2190 10 MOD 3\nOUTPUT RESULT  // Outputs: 1\n\n#Integer Division\nRESULT \u2190 10 DIV 3\nOUTPUT RESULT  // Outputs: 3\u200b\n</code></pre> <p>LOGICAL OPERATORS Logical operators are used to compare two values, depending on the operator used, it returns either True or False.</p> <ul> <li>Equal to (=) | Checks if two operands are equal. Example: 5 = 5 results in True.</li> <li>Less than (&lt;) | Checks if the first operand is less than the second. Example: 5 &lt; 8 results in True.</li> <li>Less than or equal to (&lt;=) | Checks if the first operand is less than or equal to the second. Example: 5 &lt;= 5 results in True.</li> <li>Greater than (&gt;) | Checks if the first operand is greater than the second. Example: 8 &gt; 5 results in True.</li> <li>Greater than or equal to (&gt;=) | Checks if the first operand is greater than or equal to the second. Example: 8 &gt;= 5 results in True.</li> <li>Not equal to (&lt;&gt;) | Checks if two operands are not equal. Example: 5 &lt;&gt; 8 results in True.</li> </ul> Python<pre><code>#Equal to \nprint(5 == 5)  # Outputs: True\n\n#Less than\nprint(5 &lt; 8)  # Outputs: True\n\n#Less than or equal to\nprint(5 &lt;= 8)  # Outputs: True\n\n#Greater than\nprint(5 &gt; 8)  # Outputs: False\n\n#Greater than or equal to\nprint(5 &gt;= 8)  # Outputs: False\n\n#Not equal to \nprint(5 != 8)  # In Python, != is used for not equal to\u200b\n</code></pre> Text Only<pre><code>#Equal to \nOUTPUT 5 = 5  // Outputs: TRUE\n\n#Less than\nOUTPUT 5 &lt; 8  // Outputs: TRUE\n\n#Less than or equal to\nOUTPUT 5 &lt;= 8  // Outputs: TRUE\n\n#Greater than\nOUTPUT 5 &gt; 8  // Outputs: FALSE\n\n#Greater than or equal to\n\u200bOUTPUT 5 &gt;= 8  // Outputs: FALSE\n#Not equal to \nOUTPUT 5 &lt;&gt; 8  // Outputs: TRUE\u200b\n</code></pre> <p>An example of the use of a logical operator could be:  IF 8 &gt;= 5 THEN   OUTPUT \"8 is greater than or equal to 5\" // Expected to output this message ELSE   OUTPUT \"8 is not greater than or equal to 5\" ENDIF</p> <p>BOOLEAN OPERATORS Boolean operators are used with Boolean values and expressions to make logical comparisons and decisions.</p> <ul> <li>AND | Returns True if both operands are true. Example: True AND False results in False.</li> <li>OR | Returns True if at least one of the operands is true. Example: True OR False results in True.</li> <li>NOT | Returns True if the operand is false, and vice versa. Example: NOT True results in False.</li> </ul> <p>Using AND *In the example below, we will check if a person is eligible to vote. A person is eligible if they are 18 years or older *and a citizen.</p> Python<pre><code>age = 20\ncitizen = True\n\nif age &gt;= 18 and citizen:\n    print(\"Eligible to vote.\")\nelse:\n    print(\"Not eligible to vote.\")\n</code></pre> Text Only<pre><code>AGE \u2190 20\nCITIZEN \u2190 TRUE\n\nIF AGE &gt;= 18 AND CITIZEN = TRUE THEN\n    OUTPUT \"Eligible to vote.\"\nELSE\n    OUTPUT \"Not eligible to vote.\"\nENDIF\n</code></pre> <p>Using OR Let's say a person is eligible to vote if they are 18 years or older or if they have a special permit, regardless of citizenship.</p> Python<pre><code>age = 17\nhas_special_permit = True\n\nif age &gt;= 18 or has_special_permit:\n    print(\"Eligible to vote with OR condition.\")\nelse:\n    print(\"Not eligible to vote with OR condition.\")\n</code></pre> Text Only<pre><code>AGE \u2190 17\nHAS_SPECIAL_PERMIT \u2190 TRUE\n\nIF AGE &gt;= 18 OR HAS_SPECIAL_PERMIT = TRUE THEN\n    OUTPUT \"Eligible to vote with OR condition.\"\nELSE\n    OUTPUT \"Not eligible to vote with OR condition.\"\nENDIF\n</code></pre> <p>Using NOT For this scenario, let's say a person is not eligible to vote if they are explicitly disqualified, even if they meet the age and citizenship requirements.</p> Python<pre><code>age = 20\ncitizen = True\ndisqualified = False\n\nif age &gt;= 18 and citizen and not disqualified:\n    print(\"Eligible to vote with NOT condition.\")\nelse:\n    print(\"Not eligible to vote with NOT condition.\")\n</code></pre> Text Only<pre><code>AGE \u2190 20\nCITIZEN \u2190 TRUE\nDISQUALIFIED \u2190 FALSE\n\nIF AGE &gt;= 18 AND CITIZEN = TRUE AND NOT DISQUALIFIED = TRUE THEN\n    OUTPUT \"Eligible to vote with NOT condition.\"\nELSE\n    OUTPUT \"Not eligible to vote with NOT condition.\"\nENDIF\n</code></pre>"},{"location":"8%20Programming/8.1%282%29%20PROGRAMMING%20CONCEPTS%20CONTINUED/#section-2-understand-and-use-nested-statements","title":"SECTION 2 | UNDERSTAND AND USE NESTED STATEMENTS","text":"<p>Nested statements in programming allow you to place one statement inside another. This can involve both selection (if-else) statements and iteration (loops) statements. Understanding how to effectively use nested statements is crucial for solving more complex problems where decisions are based on multiple conditions or tasks require multiple levels of looping.</p> <p>Nested Selection Nested selection involves placing if-else statements inside another if-else statement. This is particularly useful when decisions need to be made based on a series of conditions.</p> <p>Example Scenario: Suppose we want to determine if a movie is suitable for a viewer based on their age and a parent's permission.</p> Python<pre><code>age = 14\nparent_permission = True\n\nif age &gt;= 13:\n    if parent_permission:\n        print(\"You are allowed to watch the movie.\")\n    else:\n        print(\"You need a parent's permission to watch this movie.\")\nelse:\n    print(\"You are too young to watch this movie.\")\n</code></pre> Text Only<pre><code>AGE \u2190 14\nPARENT_PERMISSION \u2190 TRUE\n\nIF AGE &gt;= 13 THEN\n    IF PARENT_PERMISSION = TRUE THEN\n        OUTPUT \"You are allowed to watch the movie.\"\n    ELSE\n        OUTPUT \"You need a parent's permission to watch this movie.\"\n    ENDIF\nELSE\n    OUTPUT \"You are too young to watch this movie.\"\nENDIF\n</code></pre> <p>Nested Iteration Nested iteration involves placing a loop inside another loop. This technique is useful for working with multi-dimensional data structures or when a task requires repetitive actions within another set of repetitive actions.</p> <p>Nested Iteration Example: Team and Player Template Create a template that lists 4 teams, with each team having 6 players. This template can be used for organizing team rosters in sports or games.</p> Python<pre><code># Python code to iterate through teams and players\nfor team in range(1, 5):  # 4 teams\n    print(f\"Team {team}:\")\n    for player in range(1, 7):  # 6 players per team\n        print(f\"\\tPlayer {player}\")\n    print()  # Blank line after each team for better readability\n</code></pre> Text Only<pre><code>FOR TEAM \u2190 1 TO 4\n    OUTPUT \"Team \", TEAM, \":\"\n    FOR PLAYER \u2190 1 TO 6\n        OUTPUT \"\\tPlayer \", PLAYER\n    ENDFOR\n    OUTPUT \"\"  // Blank line after each team for better readability\nENDFOR\n</code></pre> <p>Explanation</p> <ul> <li>Outer Loop (Teams) | Iterates from 1 to 4, representing the 4 teams.</li> <li>Inner Loop (Players) | For each team, iterates from 1 to 6, representing the 6 players in each team.</li> <li>Output | The structure outputs the team number followed by a list of player numbers, using tabulation (\\t in Python or represented similarly in pseudocode) for indentation to clearly denote the players belonging to each team.</li> </ul> <p>This example illustrates the practical application of nested loops to organize and present hierarchical data in a structured format. By adjusting the range values in the loops, this approach can be easily adapted to different numbers of teams and players, showcasing the flexibility and utility of nested iteration in programming</p> <p>Limitations on Nesting While nesting can be powerful, it's important not to overcomplicate your code. For this syllabus, candidates are not required to write more than three levels of nested statements. This limitation helps keep the code more readable and manageable.</p> <p>Nested statements, both selection and iteration, allow for complex decision-making and data processing. By carefully structuring these nested statements, programmers can tackle complex problems while keeping their code efficient and understandable. Remember, the key to effectively using nested statements is to keep your logic clear and avoid unnecessary complexity.</p>"},{"location":"8%20Programming/8.1%282%29%20PROGRAMMING%20CONCEPTS%20CONTINUED/#section-3-procedures-functions-and-parameters","title":"SECTION 3 | PROCEDURES, FUNCTIONS AND PARAMETERS","text":"<p>In programming, procedures and functions are fundamental concepts that allow for code reuse, modularity, and improved readability. Both are blocks of code that perform a specific task, but they have a key difference in how they are used and the value they return.</p> <p>What is Meant by Procedures, Functions, and Parameters</p> <ul> <li>Procedures | A procedure is a block of code that performs a specific action but does not return a value to the caller. It is executed when called and is used to encapsulate code for tasks that need to be performed multiple times throughout a program.</li> <li>Functions | A function, like a procedure, is a block of code that performs a specific task, but it returns a value to the caller. Functions can be used to perform calculations, process data, and then return the result of that process.</li> <li>Parameters | Both procedures and functions can accept parameters (also known as arguments), which are pieces of data passed into them. These parameters allow procedures and functions to operate on different data without being rewritten for each unique case. Parameters make procedures and functions more versatile and adaptable.</li> </ul> <p>Below is an example of a procedure without any parameters</p> Python<pre><code>def display_message():\n    print(\"Hello from a procedure!\")\n\n# Calling the procedure\ndisplay_message()\n</code></pre> Text Only<pre><code>PROCEDURE DisplayMessage\n    OUTPUT \"Hello from a procedure!\"\nENDPROCEDURE\n\nCALL DisplayMessage\n</code></pre> <p>Below is an example of a procedure with Parameters</p> Python<pre><code>def greet_user(username):\n    print(f\"Hello, {username}!\")\n\n# Calling the procedure with a parameter\ngreet_user(\"Alice\")\n</code></pre> Text Only<pre><code>PROCEDURE GreetUser(Username)\n    OUTPUT \"Hello, \", Username, \"!\"\nENDPROCEDURE\n\nCALL GreetUser(\"Alice\")\n</code></pre> <p>Below is an example of a function without Parameters</p> Python<pre><code>def get_magic_number():\n    return 42\n\n# Calling the function and printing its return value\nprint(get_magic_number())\n</code></pre> Text Only<pre><code>FUNCTION GetMagicNumber\n    RETURN 42\nENDFUNCTION\n\nOUTPUT GetMagicNumber()\n</code></pre> <p>Below is an example of a function with Parameters</p> Python<pre><code>def add_numbers(number1, number2):\n    return number1 + number2\n\n# Calling the function with two parameters\nresult = add_numbers(5, 7)\nprint(result)\n</code></pre> Text Only<pre><code>FUNCTION AddNumbers(Number1, Number2)\n    RETURN Number1 + Number2\nENDFUNCTION\n\nRESULT \u2190 AddNumbers(5, 7)\nOUTPUT RESULT\n</code></pre> <p>Understanding and utilising procedures and functions with or without parameters is crucial for creating structured, reusable, and efficient code. While procedures perform tasks without returning a value, functions perform tasks and return a value, making both essential for modular programming. Parameters add flexibility, allowing these blocks of code to work with various data inputs.</p>"},{"location":"8%20Programming/8.1%282%29%20PROGRAMMING%20CONCEPTS%20CONTINUED/#section-4-global-and-local-variables","title":"SECTION 4 | GLOBAL AND LOCAL VARIABLES","text":"<p>Variables in programming are used to store data that your program can manipulate. The scope of a variable determines where it can be accessed within your code. This leads us to the distinction between local and global variables, which is fundamental for managing data flow and avoiding unintended side effects in your programs.</p> <p>Local Variables Local variables are declared inside a procedure or function and can only be accessed within that block. Their scope is limited to the block of code where they are defined, making them invisible to the rest of the program. This encapsulation helps in preventing conflicts and errors in large programs.</p> <p>Advantages</p> <ul> <li>Encapsulation | Keeps variables confined to the function or procedure, avoiding naming conflicts. This is especially important when large teams of programmers are working on the same project.</li> <li>Memory Efficiency | Memory used by local variables is freed once the block of code (function or procedure) finishes executing.</li> </ul> Python<pre><code>def calculate_sum(a, b):\n    result = a + b  # 'result' is a local variable\n    return result\n\nprint(calculate_sum(5, 7))\n# print(result)  # This would raise an error, as 'result' is not accessible here\n</code></pre> Text Only<pre><code>FUNCTION CalculateSum(A, B)\n    RESULT \u2190 A + B  // 'RESULT' is a local variable\n    RETURN RESULT\nENDFUNCTION\n\nOUTPUT CalculateSum(5, 7)\n// OUTPUT RESULT  // This would be incorrect, as 'RESULT' is not accessible here\n</code></pre> <p>Global Variables Global variables are declared outside any procedure or function and can be accessed and modified by any part of the program. While they offer convenience for small scripts or when sharing data between multiple functions, they should be used judiciously.</p> <p>Advantages</p> <ul> <li>Accessibility | Can be accessed from any part of the program, useful for shared data.</li> <li>Persistence | Retains value throughout the program execution, useful for data that needs to be accessed or modified by multiple functions.</li> </ul> <p>Disadvantages</p> <ul> <li>Risk of Unintended Modification | Can lead to bugs that are hard to track since any part of the program can change the variable.</li> <li>Reduced Clarity | Makes it harder to track the flow of data within the program.</li> </ul> Python<pre><code>global_number = 10  # 'global_number' is a global variable\n\ndef modify_global_number():\n    global global_number\n    global_number += 5\n\nmodify_global_number()\nprint(global_number)  # Outputs: 15\n</code></pre> Text Only<pre><code>GLOBAL_NUMBER \u2190 10  // 'GLOBAL_NUMBER' is a global variable\n\nPROCEDURE ModifyGlobalNumber\n    GLOBAL GLOBAL_NUMBER\n    GLOBAL_NUMBER \u2190 GLOBAL_NUMBER + 5\nENDPROCEDURE\n\nCALL ModifyGlobalNumber\nOUTPUT GLOBAL_NUMBER  // Outputs: 15\n</code></pre> <p>Understanding the distinction between local and global variables is crucial for writing clear, maintainable, and error-free code. Local variables provide encapsulation and are preferred for data that does not need to be shared across different parts of the program. Global variables offer convenience for shared data but come with risks of unintended modifications and should be used sparingly to maintain the integrity of your program's logic.</p>"},{"location":"8%20Programming/8.1%282%29%20PROGRAMMING%20CONCEPTS%20CONTINUED/#section-5-understand-and-use-library-routines","title":"SECTION 5 | UNDERSTAND AND USE LIBRARY ROUTINES","text":"<p>Library routines are pre-written functions or procedures provided by a programming language's standard library or external libraries. These routines offer convenient ways to perform common tasks without the need to reimplement them. Some library routines are built in and some you may need to import. Understanding how to use these routines can significantly speed up development time and ensure more reliable and efficient code.</p> <p>In this section, we will discuss the use of several common library routines: MOD, DIV, ROUND, and RANDOM.</p> <p>MOD The MOD routine calculates the remainder of a division operation between two numbers. For example 10 divided by 3 is 3 remainder 1, MOD just returns the remainder.</p> Python<pre><code>remainder = 10 % 3  # Using the modulus operator for MOD\nprint(remainder)  # Outputs: 1\n</code></pre> Text Only<pre><code>REMAINDER \u2190 10 MOD 3\nOUTPUT REMAINDER  // Outputs: 1\n</code></pre> <p>DIV The DIV routine performs integer division between two numbers, discarding any fractional part.</p> Python<pre><code>result = 10 // 3  # Using the floor division operator for DIV\nprint(result)  # Outputs: 3\n</code></pre> Text Only<pre><code>RESULT \u2190 10 DIV 3\nOUTPUT RESULT  // Outputs: 3\n</code></pre> <p>ROUND The ROUND routine rounds a floating-point number to the nearest whole number or to a specified number of decimal places.</p> Python<pre><code>rounded_number = round(3.14159, 2)  # Rounds to 2 decimal places\nprint(rounded_number)  # Outputs: 3.14\n</code></pre> Text Only<pre><code>ROUNDED_NUMBER \u2190 ROUND(3.14159, 2)\nOUTPUT ROUNDED_NUMBER  // Outputs: 3.14\n</code></pre> <p>RANDOM The RANDOM routine generates a random number. The specifics can vary; for example, you might generate a random number within a range.</p> Python<pre><code>import random\n\nrandom_number = random.randint(1, 10)  # Generates a random number between 1 and 10\nprint(random_number)\n</code></pre> Text Only<pre><code>// Assuming a RANDOM function that takes a range and returns an integer\nRANDOM_NUMBER \u2190 RANDOM(1, 10)\nOUTPUT RANDOM_NUMBER\n</code></pre> <p>WHY USE LIBRARY ROUTINES Library routines like MOD, DIV, ROUND, and RANDOM are essential tools in a programmer's toolkit, allowing for the efficient implementation of common mathematical and randomization tasks. By leveraging these routines, developers can write less code, reduce the likelihood of errors, and improve the readability and maintainability of their programs. Understanding how to use these routines is crucial for efficient programming and solving a wide array of problems.</p>"},{"location":"8%20Programming/8.1%282%29%20PROGRAMMING%20CONCEPTS%20CONTINUED/#section-6-understand-how-to-create-a-maintainable-program","title":"SECTION 6 | UNDERSTAND HOW TO CREATE A MAINTAINABLE PROGRAM","text":"<p>Creating maintainable programs is crucial for ensuring that code can be easily understood, updated, and extended by others, including your future self. Key practices that contribute to maintainability include the use of meaningful identifiers, effective commenting, and the structured use of procedures and functions. Below, we explore these aspects in detail.</p> <p>Meaningful Identifiers Meaningful identifiers make your code readable and self-explanatory. They are names given to variables, constants, arrays, procedures, and functions that describe their purpose or the data they hold.</p> <ul> <li>Variables | Use names that describe the data or purpose, such as userAge or totalAmount.</li> <li>Constants | Name constants in a way that indicates their unchangeable value, like MAX_SIZE or INTEREST_RATE.</li> <li>Arrays | Choose names that reflect the collection they represent, for instance, studentGrades or productPrices.</li> <li>Procedures and Functions | Their names should describe the action they perform or the result they return, such as calculateTotal or findMaximum.</li> </ul> <p>The Commenting Feature Comments are not executed as part of the program but serve as notes to the programmer and others who may work on the code later. They explain what the code does, why certain decisions were made, and can outline complex logic.</p> <ul> <li>Inline Comments | Used to describe specific lines of code or logic. Place them at the end of the line they refer to.</li> <li>Block Comments | Used for providing descriptions at the start of functions or major sections of code, explaining the overall purpose or behaviour.</li> </ul> <p>Procedures and Functions Organising code into procedures and functions is crucial for abstraction, code reuse, and reducing redundancy. They allow for compartmentalizing code into logical units that can be easily tested and debugged.</p> <ul> <li>Encapsulation | Group related logic into functions and procedures to hide complexity and make the main program flow clear and concise.</li> <li>Modularity | Break down the program into smaller, manageable pieces that can be developed and tested independently.</li> </ul> <p>Relevant and Appropriate Commenting of Syntax While meaningful identifiers can make the code self-explanatory to some extent, complex logic or unusual solutions may require additional explanation. Commenting becomes crucial in these scenarios.</p> <ul> <li>Why, not what | Focus on explaining why a certain approach was taken, not what the code does (which should be apparent from the code itself and meaningful identifiers).</li> <li>Updates and Changes | When modifying code, update or add comments to reflect changes, especially if the logic or purpose of the code has evolved.</li> </ul> Python<pre><code>#MEANINGFUL IDENTIFIERS - Good practice\nmonthlySalary = 3000\ninterestRateAnnual = 0.05\n\n#MEANINGFUL IDENTIFIERS - Poor practice\na = 3000  # It's not clear what this represents\nb = 0.05  # Ambiguous\n\n# COMMENTING\n# Calculate yearly interest\n# Using compound interest formula for annual compounding\nyearlyInterest = principalAmount * (1 + interestRateAnnual)\n\n#BLOCK COMMENTING\ndef calculateYearlyInterest(principal, rate):\n    \"\"\"\n    Calculate the yearly interest.\n    Parameters:\n    - principal: The principal amount.\n    - rate: The annual interest rate. \n    Returns:\n    The interest amount for one year.\n    \"\"\"\n    return principal * rate\n</code></pre> Text Only<pre><code>#MEANINGFUL IDENTIFIERS - Good practice\nMonthlySalary \u2190 3000\nInterestRateAnnual \u2190 0.05\n\n#MEANINGFUL IDENTIFIERS - Poor practice\na \u2190 3000  // It's not clear what this represents\nb \u2190 0.05  // Ambiguou\n\n# COMMENTING\n// Calculate yearly interest using compound interest formula for annual compounding\nYearlyInterest \u2190 PrincipalAmount * (1 + InterestRateAnnual)\n\n#BLOCK COMMENTING\n// Procedure to calculate yearly interest\nPROCEDURE CalculateYearlyInterest(Principal, Rate)\n    /*\n    Calculate the yearly interest.\n    Parameters:\n    - Principal: The principal amount.\n    - Rate: The annual interest rate. \n    Returns:\n    The interest amount for one year.\n    */\n    RETURN Principal * Rate\nENDPROCEDURE\n</code></pre> <p>Creating a maintainable program involves thoughtful naming, systematic organization, and clear documentation of your code. These practices not only make the code easier to understand and modify but also facilitate collaboration and ensure the longevity of your software projects</p> <p>SAMPLE PROGRAMMING QUESTION</p> <p>The names of students are stored in a one-dimensional (1D) array Student[] of type string. A separate two-dimensional (2D) array Scores[] stores the latest test scores for each student. The array already contains the scores for each student in two subjects: Math and English.</p> <ul> <li>Math scores should be in the range 0 to 100 inclusive.</li> <li>English scores should be in the range 0 to 100 inclusive.</li> <li>The student ID given to each student is used as the index for both arrays, and this is a value between 1 and 100 inclusive.</li> </ul> <p>When the data for a student is checked, a warning is given if any of the scores are out of range. If both scores are out of range, a severe warning is given.</p> <p>Write a function, using pseudocode or program code, that meets the following requirements:</p> <ul> <li>Takes the student ID as a parameter.</li> <li>Checks if the ID is valid.</li> <li>Returns an error message if the ID is not valid.</li> <li> <p>If the ID is valid:</p> </li> <li> <p>Returns the student\u2019s name.</p> </li> <li>Returns \"Scores are valid\" if both scores are within range.</li> <li>Returns \"Warning: Math score out of range\" or \"Warning: English score out of range\" if one score is out of range.</li> <li>Returns \"Severe warning: Both Math and English scores out of range\" if both scores are out of range.</li> </ul> <p>You must use pseudocode or program code and add comments to explain how your code works. You do not need to initialize the data in the arrays.</p>"},{"location":"8%20Programming/8.2%20ARRAYS/","title":"8.2 ARRAYS","text":""},{"location":"8%20Programming/8.2%20ARRAYS/#82-arrays","title":"8.2 | ARRAYS","text":""},{"location":"8%20Programming/8.2%20ARRAYS/#section-1-what-is-an-array","title":"SECTION 1 | WHAT IS AN ARRAY","text":"<p>An array is a collection of elements, each identified by at least one array index or key. Arrays can store data of the same type and are useful for organising data systematically for easy access and manipulation. </p> <p>They are just like the normal variables except they can hold multiple items of data and like variables they have the same naming conventions such as:</p> <p>NAMING RULES \u2718 Cannot start the name with a number \u200b\u2718 Cannot contain spaces \u200b\u2718 Cannot use command words such as print, python, turtle, exit, for, while and many more...</p> <p>NAMING CONVENTIONS \u2713Should start with a lowercase letter \u2713If more than one word used the first letter uppercase of proceeding words or use _ to join words \u200b\u2713Names should be meaningful to the content of the variable</p>"},{"location":"8%20Programming/8.2%20ARRAYS/#section-2-types-of-arrays","title":"SECTION 2 | TYPES OF ARRAYS","text":"<p>One-dimensional (1D) Arrays A one-dimensional array is a linear list of elements that are of the same type and are accessed by a single index. This type of array is simple and efficient for storing data that naturally forms a sequence.</p> <ul> <li>Example Use | A common use of 1D arrays is to store a list of items like user names or a series of numerical values such as test scores.</li> <li>Sample Array for a Scenario | Imagine you're managing a small music concert and need to keep track of the names of bands performing:</li> </ul> <p>bands = [\"The Foo Bar\", \"Baz Quux\", \"Quuz Corge\"]</p> <p>Two-dimensional (2D) Arrays A two-dimensional array, often called a matrix, is an array of arrays where each entry in the main array can hold another array. This setup allows for a grid-like structure, which is excellent for more complex data organizations that require accessing elements via two indices (rows and columns).</p> <ul> <li>Example Use | 2D arrays are useful for applications such as creating game boards, spreadsheets, or storing data in table form, where each row could represent a record and each column a type of information about that record.</li> <li>Sample Array for a Scenario | Suppose you are a teacher recording grades in different subjects for a class of three students. Each row represents a student, and each column represents a different subject.</li> </ul> <p>grades = [  [87, 92, 78], # Grades for Student 1  [91, 85, 90], # Grades for Student 2  [88, 84, 82]  # Grades for Student 3</p>"},{"location":"8%20Programming/8.2%20ARRAYS/#section-3-declaring-arrays","title":"SECTION 3 | DECLARING ARRAYS","text":"<p>Declaring an array involves specifying its type and the number of elements it will hold. This process can vary significantly between programming languages. Below, we expand on how to declare one-dimensional (1D) and two-dimensional (2D) arrays in both Python and using the CIE pseudocode conventions.</p> <p>DECLARING 1D ARRAYS</p> Python<pre><code>To declare a one-dimensional array in Python, which is typically done using lists, you simply assign a list of elements to a variable. Here, the elements can be of any type: strings, numbers, or even other lists.\n\n# Declaring a 1D array with string elements\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\n# This creates a list of fruits with three elements.\n</code></pre> Text Only<pre><code>In the CIE pseudocode, an array must be explicitly declared with its size and type, which makes it clearer how many items the array can hold and what type they are.\n\n# Declare an array 'fruits' capable of holding three strings, indexed from 1 to 3.\nDECLARE fruits : ARRAY[1:3] OF STRING\n\n# Assign values to each position in the array.\nfruits[1] \u2190 \"apple\"\nfruits[2] \u2190 \"banana\"\nfruits[3] \u2190 \"cherry\"\n</code></pre> <p>DECLARING 2D ARRAYS</p> <p>A two-dimensional array in Python is essentially a list of lists. Each sublist represents a row in the array.</p> <p>Imagine a classroom with three students and their grades in three different subjects (Math, Science, English). It would be logical to arrange of data in rows and columns, as you would expect to see if you put the data in a spreadsheet. Here we create a 2D array in Pseudocode an Python with the same row and column structure.</p> Python<pre><code># Declaring a 2D array to store grades for three students in three subjects\ngrades = [\n  [85, 90, 88],  # Grades for Student 1: Math, Science, English\n  [78, 92, 80],  # Grades for Student 2: Math, Science, English\n  [90, 85, 87]   # Grades for Student 3: Math, Science, English\n]\n# This creates a table-like structure where each row represents a student and each column a subject.\n</code></pre> Text Only<pre><code># Declare a 2D array 'grades' with 3 rows and 3 columns, each cell to hold an integer representing a grade.\nDECLARE grades : ARRAY[1:3, 1:3] OF INTEGER\n\n# Assigning grades\n# Each row corresponds to a student, and each column corresponds to a subject: Math, Science, English\ngrades[1, 1] \u2190 85  # Student 1, Math\ngrades[1, 2] \u2190 90  # Student 1, Science\ngrades[1, 3] \u2190 88  # Student 1, English\n\ngrades[2, 1] \u2190 78  # Student 2, Math\ngrades[2, 2] \u2190 92  # Student 2, Science\ngrades[2, 3] \u2190 80  # Student 2, English\n\ngrades[3, 1] \u2190 90  # Student 3, Math\ngrades[3, 2] \u2190 85  # Student 3, Science\ngrades[3, 3] \u2190 87  # Student 3, English\n</code></pre>"},{"location":"8%20Programming/8.2%20ARRAYS/#section-4-using-arrays","title":"SECTION 4 | USING ARRAYS","text":"<p>Arrays are used for storing data that can be logically grouped together, such as the grades of students, temperature readings, or spatial coordinates.</p>"},{"location":"8%20Programming/8.3%20FILE%20HANDLING/","title":"8.3 FILE HANDLING","text":""},{"location":"8%20Programming/8.3%20FILE%20HANDLING/#83-file-handling","title":"8.3 | FILE HANDLING","text":""},{"location":"8%20Programming/8.3%20FILE%20HANDLING/#section-1-what-is-file-handling","title":"SECTION 1 | WHAT IS FILE HANDLING","text":"<p>File handling refers to the process by which a computer program interacts with files stored on a disk, enabling the reading, writing, and modification of data. Unlike data stored in standard arrays, which are temporary and reset every time a program restarts, files provide a way to preserve data persistently across multiple runs of an application. This is crucial for applications that require long-term data storage, such as user settings, game scores, or transaction logs.</p> <p>In programming languages like Python, file handling is straightforward yet powerful. Python uses simple commands to open, read, write, and close files, making it an ideal learning tool for students transitioning from temporary data storage in arrays to more permanent solutions. For example, to write data to a file, a Python program might open a file in write mode ('w'), write strings directly to the file, and then close it to ensure the data is saved:</p> Python<pre><code>with open('data.txt', 'w') as file:\n    file.write('Have a great day.')\n</code></pre> Text Only<pre><code>DECLARE DataToStore : STRING\nDataToStore \u2190 \"Have a great day.\"\n\nOPENFILE \"data.txt\" FOR WRITE\nWRITEFILE \"data.txt\", DataToStore\nCLOSEFILE \"data.txt\"\n</code></pre> <p>This code snippet opens data.txt (or creates it if it doesn't exist), writes a line of text, and automatically closes the file when done. The use of files allows data to be retained after the program closes, providing a durable means of storing information that can be retrieved and manipulated in subsequent program executions. This concept of persistent storage is fundamental for developing applications that interact with user data or require the retention of operational data over time.</p>"},{"location":"8%20Programming/8.3%20FILE%20HANDLING/#section-2-reading-from-a-text-file","title":"SECTION 2 | READING FROM A TEXT FILE","text":"<p>To read data from a file, you must first open it in READ mode. Once opened, you can read the data using:</p> Python<pre><code># Open the file \"data.txt\" in read mode and read from it\nwith open(\"data.txt\", \"r\") as file:\n    my_data = file.read()\n\n# Output the data read from the file\nprint(my_data)\n</code></pre> Text Only<pre><code>DECLARE MyData : STRING\nOPENFILE \"data.txt\" FOR READ\nREADFILE \"data.txt\", MyData\nCLOSEFILE \"data.txt\"\n</code></pre> <p>SECTION 3 | WRITING TO A TEXT FILE</p> <p>To write data to a file, open it in WRITE mode. Any existing content in the file will be erased. To write, use:</p> Python<pre><code># Open the file \"output.txt\" in write mode and write to it\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"Hello, world!\")\n</code></pre> Text Only<pre><code>DECLARE MyData : STRING\nMyData \u2190 \"Hello, world!\"\nOPENFILE \"output.txt\" FOR WRITE\nWRITEFILE \"output.txt\", MyData\nCLOSEFILE \"output.txt\"\n</code></pre>"},{"location":"8%20Programming/8.3%20FILE%20HANDLING/#section-4-closing-a-file","title":"SECTION 4 | CLOSING A FILE","text":"<p>After completing the read or write operations, it is good practice to close the file:</p> Text Only<pre><code>CLOSEFILE \"output.txt\"\n</code></pre>"},{"location":"8%20Programming/8.3%20FILE%20HANDLING/#section-5-copying-text-between-files","title":"SECTION 5 | COPYING TEXT BETWEEN FILES","text":"<p>Consider a scenario where you need to copy a line of text from one file to another:</p> Python<pre><code># Open \"FileA.txt\" for reading\nwith open(\"FileA.txt\", \"r\") as file_a:\n    line_of_text = file_a.read()  # Read all content from FileA\n\n# Open \"FileB.txt\" for writing\nwith open(\"FileB.txt\", \"w\") as file_b:\n    file_b.write(line_of_text)  # Write the content to FileB\n</code></pre> Text Only<pre><code>DECLARE LineOfText : STRING\nOPENFILE \"FileA.txt\" FOR READ\nOPENFILE \"FileB.txt\" FOR WRITE\nREADFILE \"FileA.txt\", LineOfText\nWRITEFILE \"FileB.txt\", LineOfText\nCLOSEFILE \"FileA.txt\"\nCLOSEFILE \"FileB.txt\"\n</code></pre>"},{"location":"8%20Programming/8.3%20FILE%20HANDLING/#section-6-readwrite-word-line-document","title":"SECTION 6 | READ/WRITE - WORD, LINE, DOCUMENT","text":"<p>Here, we explore the concepts of reading and writing by word, by line, and by the entire document, and how these operations are typically implemented in programming.</p> <p>Reading and Writing a Word When you read or write a word from a file, you are typically interacting with the smallest unit of meaningful text separated by spaces or punctuation. This level of granularity is useful for text analysis, such as counting word frequency or replacing specific words.</p> <p>READING A WORD</p> Python<pre><code>with open(\"file.txt\", \"r\") as file:\n    words = file.read().split()  # This reads the entire content and splits it by whitespace\n    for word in words:\n        print(word)  # This prints each word separately\n</code></pre> Text Only<pre><code>OPENFILE \"file.txt\" FOR READ\nDECLARE words : LIST OF STRING\nREADFILE \"file.txt\", words  // Assuming the entire file is read and split into words\nFOR EACH word IN words\n    OUTPUT word\nENDFOR\nCLOSEFILE \"file.txt\"\n</code></pre> <p>WRITING A WORD</p> Python<pre><code>with open(\"file.txt\", \"w\") as file:\n    word = \"Hello\"\n    file.write(word + \" \")  # Writes a single word to the file, followed by a space\n</code></pre> Text Only<pre><code>DECLARE word : STRING\nword \u2190 \"Hello\"\nOPENFILE \"file.txt\" FOR WRITE\nWRITEFILE \"file.txt\", word + \" \"  // Adds a space after the word\nCLOSEFILE \"file.txt\"\n</code></pre> <p>Reading and Writing a Line Lines represent a sequence of characters ending with a newline character (\\n). Handling data line by line is one of the most common forms of file manipulation, used for reading configuration files, logs, or any data structured into rows.</p> <p>READING A LINE</p> Python<pre><code>with open(\"file.txt\", \"r\") as file:\n    for line in file:\n        print(line.strip())  # `strip` removes the newline character at the end of each line\n</code></pre> Text Only<pre><code>OPENFILE \"file.txt\" FOR READ\nDECLARE line : STRING\nWHILE NOT EOF(\"file.txt\")  // Loop until the end of the file\n    READFILE \"file.txt\", line\n    OUTPUT line\nENDWHILE\nCLOSEFILE \"file.txt\"\n</code></pre> <p>WRITING A LINE</p> Python<pre><code>with open(\"file.txt\", \"w\") as file:\n    line = \"This is a line of text\\n\"\n    file.write(line)  # Writes the line including the newline character to delineate lines\n</code></pre> Text Only<pre><code>DECLARE line : STRING\nline \u2190 \"This is a line of text\\n\"\nOPENFILE \"file.txt\" FOR WRITE\nWRITEFILE \"file.txt\", line\nCLOSEFILE \"file.txt\"\n</code></pre> <p>Reading and Writing the Entire Document Sometimes, it's necessary to work with the entire content of a document at once, such as when loading configuration settings or processing small files where it's efficient to work with all the data in memory.</p> <p>READING THE DOCUMENT</p> Python<pre><code>with open(\"file.txt\", \"r\") as file:\n    content = file.read()  # Reads the entire file into a single string\n    print(content)\n</code></pre> Text Only<pre><code>OPENFILE \"file.txt\" FOR READ\nDECLARE content : STRING\nREADFILE \"file.txt\", content  // Reads the entire file into 'content'\nOUTPUT content\nCLOSEFILE \"file.txt\"\n</code></pre> <p>WRITING THE DOCUMENT</p> Python<pre><code>with open(\"file.txt\", \"w\") as file:\n    content = \"This is the entire content of the file.\"\n    file.write(content)  # Writes a large block of text to the file\n</code></pre> Text Only<pre><code>DECLARE content : STRING\ncontent \u2190 \"This is the entire content of the file.\"\nOPENFILE \"file.txt\" FOR WRITE\nWRITEFILE \"file.txt\", content\nCLOSEFILE \"file.txt\"\n</code></pre> <p>MULTIPLE CHOICE QUESTIONS</p> <p>1: What does the OPENFILE command do in file handling? A) Closes the file B) Reads data from the file C) Opens the file for reading, writing, or both D) Deletes the file</p> <p>2: When opening a file for writing using OPENFILE \"data.txt\" FOR WRITE, what happens if \"data.txt\" already exists? A) The file is deleted and a new empty file is created. B) The file cannot be opened unless it is empty. C) Data will be appended to the existing data. D) The file is opened normally with no changes to existing data.</p> <p>3: Which command reads data from an open file into a variable? A) OPENFILE B) READFILE C) WRITEFILE D) CLOSEFILE</p> <p>4: Why is it important to close a file after operations are completed? A) To save the data written to the file B) To free up system resources C) Both A and B D) Closing a file is optional and does not impact the system or data.</p> <p>5: In file handling, what does EOF stand for, and why is it significant? A) End Of File, it indicates that there is no more data to read from the file. B) Execution Of File, it indicates that the file is currently being executed. C) Each Open File, a reference to all open files in a program. D) Error On File, an error message that occurs when a file cannot be accessed.</p> <p>6: Which file mode should be used if you need to both read from and write to the same file without deleting its contents? A) READ B) WRITE C) APPEND D) READ/WRITE \u200b 7: What is a potential consequence of not closing a file in a program? A) The data might not be properly saved to the file. B) The program might use more memory than necessary. C) Other programs might not be able to open the file. D) All of the above.</p> <p>8: How can you ensure data is read one line at a time from a file? A) Use READFILE ,  and specify you want lines. B) Read the entire file and split the data into lines in the program. C) Use a loop to read until EOF, capturing data line by line. D) It's not possible to read data one line at a time. <p>9: What is the correct way to write the string \"Hello World\" to a new file called \"greetings.txt\"? A) OPENFILE \"greetings.txt\" FOR WRITE then WRITEFILE \"Hello World\" B) WRITEFILE \"greetings.txt\", \"Hello World\" without opening the file. C) OPENFILE \"greetings.txt\" FOR WRITE then WRITEFILE \"greetings.txt\", \"Hello World\" then CLOSEFILE \"greetings.txt\" D) WRITEFILE \"greetings.txt\", \"Hello World\" then CLOSEFILE \"greetings.txt\"</p> <p>10: Which of the following is true about the WRITEFILE command? A) It can be used without opening the file first. B) It appends the data to the end of the file by default. C) It overwrites the existing content unless the file is opened in append mode. D) It reads data from the file and writes it to another file.</p>"},{"location":"8%20Programming/8.3%20FILE%20HANDLING/#section-7-file-handling-with-spreadsheets-csv-files","title":"SECTION 7 | FILE HANDLING WITH SPREADSHEETS / CSV FILES","text":"<p>CSV (Comma Separated Values) files are commonly used to store tabular data. These files are straightforward to read from and write to because their data is separated by commas, making parsing simple. In computer programming, handling CSV files efficiently can be crucial for data processing tasks such as database uploads, data analysis, and report generation. Here, we'll explore how to perform basic operations such as reading, writing, appending, and modifying data in CSV files.</p> <p>READING FROM A CSV FILE</p> Python<pre><code>import csv\n\nwith open('data.csv', 'r', newline='') as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)  # Each row is a list of values\n</code></pre> Text Only<pre><code>OPENFILE \"data.csv\" FOR READ\nDECLARE row : STRING\nWHILE NOT EOF(\"data.csv\")\n    READFILE \"data.csv\", row\n    OUTPUT row  // Prints each row of the CSV file\nENDWHILE\nCLOSEFILE \"data.csv\"\n</code></pre> <p>WRITING TO A CSV FILE</p> Python<pre><code>import csv\n\nwith open('new_data.csv', 'w', newline='') as file:\n    writer = csv.writer(file)\n    writer.writerow(['Name', 'Age', 'Location'])  # Write a header row\n</code></pre> Text Only<pre><code>OPENFILE \"new_data.csv\" FOR WRITE\nDECLARE dataRow : STRING\ndataRow \u2190 \"Name,Age,Location\"\nWRITEFILE \"new_data.csv\", dataRow\nCLOSEFILE \"new_data.csv\"\n</code></pre> <p>APPENDING A CSV FILE</p> <p>Appending to a CSV file involves adding new rows of data without overwriting existing data.</p> Python<pre><code>OPENFILE \"data.csv\" FOR APPEND\nDECLARE newRow : STRING\nnewRow \u2190 \"John,30,New York\"\nWRITEFILE \"data.csv\", newRow\nCLOSEFILE \"data.csv\"\n</code></pre> Text Only<pre><code>import csv\n\nwith open('data.csv', 'a', newline='') as file:\n    writer = csv.writer(file)\n    writer.writerow(['John', 30, 'New York'])  # Append a new row\n</code></pre> <p>MODIFYING A CSV FILE</p> <p>Modifying a CSV file generally involves reading the existing data, making changes, and then writing the data back to the file.</p> Python<pre><code>import csv\n\n# Read all data\ndata = []\nwith open('data.csv', 'r', newline='') as file:\n    reader = csv.reader(file)\n    for row in reader:\n        data.append(row)\n\n# Modify data\nfor row in data:\n    if 'OldLocation' in row:\n        index = row.index('OldLocation')\n        row[index] = 'NewLocation'\n\n# Write data back\nwith open('data.csv', 'w', newline='') as file:\n    writer = csv.writer(file)\n    for row in data:\n        writer.writerow(row)\n</code></pre> Text Only<pre><code>import csv\n\n# Read all data\ndata = []\nwith open('data.csv', 'r', newline='') as file:\n    reader = csv.reader(file)\n    for row in reader:\n        data.append(row)\n\n# Modify data\nfor row in data:\n    if 'OldLocation' in row:\n        index = row.index('OldLocation')\n        row[index] = 'NewLocation'\n\n# Write data back\nwith open('data.csv', 'w', newline='') as file:\n    writer = csv.writer(file)\n    for row in data:\n        writer.writerow(row)\n</code></pre> <p>EXAMINATION STYLE QUESTIONS</p> <p>1: What does the following block of pseudocode do?</p> <p>DECLARE FileReader : FILE OPENFILE \"journal.txt\" FOR READ DECLARE LineCount : INTEGER LineCount \u2190 0 DECLARE Line : STRING</p> <p>READFILE \"journal.txt\", Line WHILE NOT Line = \"\"   LineCount \u2190 LineCount + 1   READFILE \"journal.txt\", Line ENDWHILE</p> <p>OUTPUT \"Number of lines in the file: \", LineCount CLOSEFILE \"journal.txt\"</p> <p>A) Counts the number of words in journal.txt B) Counts the number of characters in journal.txt C) Counts the number of lines in journal.txt D) Copies the content of journal.txt to another file</p> <p>2: Write pseudocode to append the text \"Remember to subscribe!\" to the end of an existing text file named \"notes.txt\".</p> <p>*3: Examine the following pseudocode and explain what it accomplishes. *OPENFILE \"report.txt\" FOR WRITE FOR i FROM 1 TO 100   WRITEFILE \"report.txt\", \"Line \", i ENDFOR CLOSEFILE \"report.txt\"</p> <p>*4: Identify the error in the following pseudocode that intends to read each word from data.txt and print it. *OPENFILE \"data.txt\" FOR READ DECLARE Word : STRING</p> <p>READFILE \"data.txt\", Word WHILE NOT Word = \"\"   OUTPUT Word   READFILE \"data.txt\", Word ENDWHILE</p> <p>CLOSEFILE \"data.txt\"</p> <p>5: Given the scenario where a student needs to save their daily expenses into a file named \"expenses.txt\", write pseudocode that allows the user to enter their expenses one at a time and save each entry on a new line in the file until the user types \"stop\".</p>"},{"location":"9%20DATABASES/9.1%20%20DEFINING%20A%20DATABASE/","title":"9.1 DEFINING A DATABASE","text":""},{"location":"9%20DATABASES/9.1%20%20DEFINING%20A%20DATABASE/#91-defining-a-database","title":"9.1 | DEFINING A DATABASE","text":""},{"location":"9%20DATABASES/9.1%20%20DEFINING%20A%20DATABASE/#what-is-a-database","title":"WHAT IS A DATABASE","text":"<p>As its name suggests a database is a base for storing data. With many advantages over the old paper system of storing data, Databases save space(physical storage space, compared to paper records), allow multiple people to access the same data at the same time and queries (similar to filters) can be done to only show the data required.</p> <p>A database is system that allows us to store data in a structured way using tables and fields, and gives us various means of access to to the data.</p> <p>What is the difference between a data and information? Data is a collection of facts that are meaningless on their own whereas information puts data into clear understandable context. </p> <p>What is the difference between a database and a spreadsheet? Yes, when you look at a database it might look very similar to a spreadsheet. Whilst spreadsheets may primarily be used to manipulate data using functions and formula to perform calculations and statistics, whereas databases are primarily used to store data and often have relationships between tables and should allow the user to easily generate queries to view specific data. Databases are often contain much more data than a spreadsheet.</p> <p>What is the difference between a database and an information system? A database may form part of the backend of an information system. As described on wikipedia    ' An Information system (IS) is a formal, sociotechnical, organizational system designed to collect, process, store, and  distribute information. In a sociotechnical perspective, information systems are composed by four components: task, people, structure (or roles), and technology' (https://en.wikipedia.org/wiki/Information_system) A database will contain data that is used by information systems where-as the information system comprises of the complete system, furthermore may present the data from the database in a way in which it becomes information. </p> <p>9.1 DATABASES</p> <p>All databases contain at least one Table, Record and Field, these are 3 basic terms you should understand when getting started.</p> <p></p> <p>Table: A table is what holds the records, fields and defines the structure of the database.  Record: A record is all of the data about one item. In the table above record one is all of the details about Mercedes Field: A field refers to each type of data held. In the table above an example of a field would be TeamName</p> <p>Entities: An entities is a unique classification about data such as people, objects, places or events. \u200bAttributes: An attribute is a single item of data such as the 'Points' for 'Mercedes' in the table above [221]. Attributes could be all the details of the team in position 1, for example [1,Mercedes,Bottas,Hamilton,221].</p> <p>If you were asked the question: What is the team name from the record in the second position? The answer would be 'Red Bull Racing'</p> <p>WHAT IS A FLAT-FILE DATABASE</p> <p>A flat file database is a database where all the records are stored in a single table. The databases above showing the 'F1 Constructors' table is a single flat file database. It has no other tables that it is connected to or has a relationship with. For a very basic and simple that is used by one or a small amount of people database a flat-file database be suitable.</p> <p>Databases are more powerful when using a relational database concept. Watch the video below for more on how databases differ from simple spreadsheets.</p> <p>DATA VALIDATION</p> <p>Data validation and data verification are two important processes used to ensure the accuracy, completeness, and consistency of data in a database system. Although the terms are sometimes used interchangeably, they refer to different processes.</p> <p>DATA VALIDATION | Data validation is the process of checking whether the data entered into a system is accurate, complete, and consistent with predefined rules and constraints. The purpose of data validation is to ensure that the data entered into the system is correct and can be used reliably.</p> <p>Data validation is typically performed when data is first entered into the system, and it involves checking for errors, such as missing or invalid data, incorrect data types, or data that does not conform to predefined rules and constraints. Data validation may be performed using automated validation tools, such as regular expressions, or it may involve manual review and correction of data.</p> <p>DATA VERIFICATION | Data verification is the process of checking whether the data in the database is accurate, complete, and consistent with the original source. The purpose of data verification is to ensure that the data stored in the database is a true representation of the original data source.</p> <p>Data verification is typically performed on a periodic basis, such as during data migrations or when integrating data from multiple sources. It involves comparing the data in the database with the original source to ensure that it is accurate and complete. Data verification may involve manual checks, automated tools, or a combination of both.</p> <p>Data validation and data verification are both essential processes for ensuring the accuracy, completeness, and consistency of data in a database system. Data validation checks the accuracy and completeness of data when it is first entered into the system, while data verification checks the accuracy and completeness of data stored in the database relative to the original source. By performing both data validation and data verification, organizations can ensure that their data is reliable, accurate, and useful.</p> <p>TYPES OF VALIDATION</p> <p>LENGTH CHECK | This validation ensures that the data entered has a specific length. It's particularly useful for fields where the length of the data is known and fixed, such as a postal code or telephone number. EXAMPLE | A user is asked to enter a ZIP code, which should be exactly 5 digits long. If the user enters less or more than 5 digits, the system will flag this as an error.</p> <p>RANGE CHECK | This type of validation checks if a value falls within a certain range. It's used for numerical data where there are known minimum and maximum values. EXAMPLE | If a user is inputting their age into a form, and the valid age range is 18 to 99, any number outside of this range (like 17 or 100) will be rejected.</p> <p>DATA TYPE CHECK | This validation ensures that the data entered is of the correct data type. Common data types include integers, strings, dates, etc. EXAMPLE | If a user is asked to enter a date of birth, the system will check to ensure that the input is in a valid date format (like MM/DD/YYYY). If the user enters something like \"abcde\", the system will reject it as it doesn't match the date data type.</p> <p>PRESENCE CHECK | This validation is used to ensure that essential data is not left blank. It's a basic form of validation to ensure that required fields are filled in. EXAMPLE | On a registration form, fields such as 'Email Address' or 'Password' might be mandatory. If the user tries to submit the form without filling these fields, the system will prompt them to complete these fields.</p> <p>CHECK DIGIT | A check digit is a form of redundancy check used for error detection, commonly used in sequences of numbers like account numbers, credit card numbers, etc. A check digit is calculated from the other digits and then included as part of the data. EXAMPLE | In a credit card number, the last digit is often a check digit. When a user enters their credit card number, the system can perform a calculation (like the Luhn algorithm) to verify that the number is potentially valid by checking this digit. If the check digit doesn't match the calculated value, it indicates a possible error in the entered number.</p> <p>TEST DATA</p> <p>Test data is crucial in software testing because it allows developers and testers to verify that a software application functions as intended. By using test data, they can simulate how the software will perform under various conditions and with different types of input. This process helps in identifying bugs, ensuring data integrity, enhancing security, and improving user experience. Test data must be comprehensive and diverse to effectively test all aspects of the software.</p> <p>NORMAL DATA | Normal data, also known as valid data, refers to input that is expected under regular usage conditions. It falls within the range of acceptable or anticipated values that the system is designed to handle. EXAMPLE | For a field accepting a person's age, normal data would be any integer between 1 and 100, assuming these are the reasonable age limits for the application's context.</p> <p>ABNORMAL DATA | Abnormal data, or invalid data, is data that falls outside of what the system is designed to handle. It is used to test how the system behaves with inputs that are unexpected or out of scope. EXAMPLE | If a text field is only meant to accept alphabetic characters, entering numerical values or special characters would be considered abnormal data.</p> <p>EXTREME DATA / BOUNDARY DATA | Extreme data (also known as boundary data), a subset of normal data, consists of values that are at the edge of acceptable input but still within the range that the system is supposed to handle. It is used to test the limits of the system's capabilities. EXAMPLE | For a field accepting a percentage value where the normal range is 0 to 100, extreme data examples would be exactly 0 and 100.</p>"},{"location":"9%20DATABASES/9.2%20%20DATA%20TYPES/","title":"9.2  DATA TYPES","text":""},{"location":"9%20DATABASES/9.2%20%20DATA%20TYPES/#92-data-types","title":"9.2 | DATA TYPES","text":""},{"location":"9%20DATABASES/9.2%20%20DATA%20TYPES/#what-is-meant-by-data-types","title":"WHAT IS MEANT BY 'DATA TYPES'","text":"<p>In the context of databases, data types are fundamental attributes that define the kind of data a database column can hold. They are essential because they ensure data consistency, accuracy, and efficient storage. By defining data types, a database knows exactly how to store, retrieve, and process the data. For instance, a data type can specify whether a column should hold numerical values, text, dates, or binary data. This not only helps in maintaining data integrity (by preventing incorrect data types from being stored in a column) but also optimises query performance. When data types are correctly defined, databases can more effectively allocate storage and execute operations, leading to faster and more reliable database systems. In summary, data types are crucial in databases as they provide a framework for storing data in a structured and efficient manner, ensuring the database operates correctly and effectively.</p> <p>DATA TYPES</p> <p>TEXT / ALPHANUMERIC | Text or alphanumeric data types are used to store combinations of letters, numbers, and other characters. They are typically used for storing names, addresses, or any other kind of textual information. Usage Example: In a customer database, the customer's name (\"John Doe\") and address (\"123 Maple Street\") would be stored as text/alphanumeric data.</p> <p>CHARACTER | The character data type is used for storing single letters or symbols. Unlike text, which can include multiple characters, this type is limited to just one. Usage Example: Storing the first letter of a last name, or a grade in a grading system (like 'A', 'B', 'C', etc.), would use the character data type.</p> <p>BOOLEAN | A Boolean data type represents two possible states: true or false. This is often used in conditions and logical operations. Usage Example: In a user permissions setting, a Boolean value could represent whether a user is allowed to access a particular feature (true for access granted, false for access denied).</p> <p>INTEGER | Integer data types store whole numbers, which can be positive, negative, or zero, but without any decimal points. Usage Example: Counting items (like the number of books on a shelf) would use an integer, as you can't have a fraction of a book in this context.</p> <p>REAL | Real numbers, also known as floating-point numbers, are used to represent numbers that require decimal points. They are essential for precision in calculations. Usage Example: Financial applications often use real numbers, for instance, to represent currency values like $100.99.</p> <p>DATE / TIME | The date/time data type is used to store dates and times. This can include just dates, just times, or both combined. Usage Example: In a blogging platform, the date/time data type could be used to store the publication date and time of a blog post.</p>"},{"location":"9%20DATABASES/9.3%20%20PRIMARY%20KEYS/","title":"9.3  PRIMARY KEYS","text":""},{"location":"9%20DATABASES/9.3%20%20PRIMARY%20KEYS/#93-primary-keys","title":"9.3 | PRIMARY KEYS","text":""},{"location":"9%20DATABASES/9.3%20%20PRIMARY%20KEYS/#what-is-a-primary-key","title":"WHAT IS A PRIMARY KEY","text":"<p>In database management, a primary key is a unique identifier for each record in a database table. It is a specific choice of a minimal set of columns (attributes) that uniquely define a row in a table. The primary key's main purposes are:</p> <ul> <li>Uniqueness | Ensures that each record in the table is distinct from all others. No two rows can have the same primary key value, which helps in maintaining data integrity.</li> <li>Indexing | Primary keys are often used to create indexes in a database, allowing for faster search and retrieval of data.</li> <li>Relationships | They are crucial in establishing relationships between tables. In relational databases, primary keys from one table are often used as foreign keys in another, creating a link between the two tables.</li> </ul> <p>PRIMARY KEY CHARACTERISTICS</p> <ul> <li>Uniqueness | It must uniquely identify each record.</li> <li>Non-Modifiable | Once created, the value of the primary key should not change. It should be a stable identifier for the record.</li> <li>Not Null | A primary key cannot be null. Every record needs to have a value for the primary key.</li> <li>Simplicity | Ideally, it should be compact and consist of as few columns as possible</li> </ul> <p>IDENTIFYING A SUITABLE PRIMARY KEY</p> <p>When determining a suitable primary key for a given database table, consider the following:</p> <ul> <li>Natural vs. Surrogate Keys | A natural key is derived from existing data that naturally identifies a record (like an email address in a user table), while a surrogate key is a unique identifier created by the database (like an auto-incremented number).</li> <li>Data Type and Length | Choose a data type that is appropriate for the key (e.g., integer, GUID) and ensure it is of optimal length for performance.</li> <li>Consistency | Ensure the key is consistently available and does not change over time.</li> </ul> <p>Example Consider a database table for storing customer information. The table includes fields like CustomerID, Name, Email, Phone, and Address. In this scenario, CustomerID is a suitable primary key. It is unique for each customer, non-modifiable, always present, and simple (likely an integer).</p> <p>A well-chosen primary key ensures efficient data management and retrieval, and it plays a critical role in maintaining the integrity and structure of the database.</p> <p>In the example above it may not be a good idea to use the phone number or email address as the primary key for the following reasons</p> <ul> <li>Redistribution of Phone Numbers | Phone numbers can be reassigned or redistributed to different individuals over time. This can lead to conflicts or inaccuracies in the database, as the same phone number might be associated with different users at different times.</li> <li>Length and Format Variability | Phone numbers vary in length and format, depending on the country and whether they are mobile or landline numbers. This variability can cause inconsistencies in the database structure, complicating data management and potentially affecting performance due to non-uniform indexing.</li> <li>Duplication Issues | Both phone numbers and email addresses may be shared by multiple individuals, such as family members or employees at the same company. This shared usage poses a problem for uniqueness \u2013 a fundamental requirement of primary keys. If one family member or employee has already registered with a particular phone number or email, the same contact information cannot be used to uniquely identify another individual in the database.</li> <li>Changeability and Mutability | Phone numbers and email addresses are not immutable. Users may change their contact information for various reasons, such as changing phone providers or creating new email accounts. Since primary keys ideally should be stable and unchanging, using such mutable data can lead to significant challenges in maintaining data integrity and consistency.</li> </ul>"},{"location":"9%20DATABASES/9.4%20%20SQL/","title":"9.4  SQL","text":""},{"location":"9%20DATABASES/9.4%20%20SQL/#94-sql-structured-query-language","title":"9.4 | SQL (STRUCTURED QUERY LANGUAGE)","text":""},{"location":"9%20DATABASES/9.4%20%20SQL/#what-is-sql","title":"WHAT IS SQL\uff1f","text":"<p>SQL, short for Structured Query Language. SQL is the language we use to communicate with databases, SQL can be used within many other languages such as Python or Go to create a link and method of accessing, searching and manipulating the data within the database. SQL is the most popular method of querying / requesting and changing data within a database, if you are handling data then you should be familiar with SQL.</p> <p>In this section we look at some of the most popular SQL methods.</p> <p>Key SQL Clauses and Functions</p> <ul> <li>SELECT: Used to specify the columns to be displayed in the query's result.</li> <li>FROM: Indicates the table from which to retrieve the data.</li> <li>WHERE: Applies a condition to filter the records.</li> <li>ORDER BY: Sorts the result set in either ascending or descending order.</li> <li>SUM: Aggregates data by calculating the sum of a numeric column.</li> <li>COUNT: Counts the number of rows that match a specified criterion.</li> </ul>"},{"location":"9%20DATABASES/9.4%20%20SQL/#section-1-select","title":"SECTION 1 | SELECT","text":"<p>Using SQL to select data from the database, pulls data from the original database and creates a new report with just the data you have selected. It does not change the original data, changing data will come later in the delete, insert and update methods.</p> Text Only<pre><code># SELECT ALL\n\nSelect specified fields of data. Only return the columns that you want from a specified table.\n\nSELECT column1, column2 FROM table\n\nExample:\nSELECT gameID, gameName FROM currently_playing\n</code></pre> Text Only<pre><code># SELECT WHERE\n\nSelect data that meets a specified condition. For example select all players with a score greater than 10.\n\nSELECT fields FROM table WHERE field (operator) condition\n\nExample:\nSELECT * FROM currently_playing WHERE gameID = 3\n</code></pre> Text Only<pre><code># SELECT BETWEEN\n\nTo select data between certain values.\n\nSELECT fields FROM table WHERE field BETWEEN value AND value\n\nExample:\nSELECT * FROM currently_playing WHERE gameID BETWEEN 1 AND 3\n</code></pre> Text Only<pre><code># SELECT AND / OR\n\nTwo make a selection that requires more than one conditional parameter to be met.\n\nSELECT fields FROM table WHERE condition AND condition\n\nExample:\nSELECT * FROM currently_playing WHERE gameName = \"Pac Land\" AND gameID = 3\n</code></pre> Text Only<pre><code># SELECT WILDCARD\n\nYou can create a search to find a field that contains a value within a string of values by using the wildcard. The wildcard use the % sign or * sign with some DB such as MS Access.\n\nSELECT fields FROM table WHERE field LIKE %condition%\n\nExample:\nSELECT * FROM currently_playing WHERE gameName LIKE \"%Land%\" \n\nIn this example games such as PacLand should be found.\n</code></pre>"},{"location":"9%20DATABASES/9.4%20%20SQL/#section-2-order-by","title":"SECTION 2 | ORDER BY","text":"<p>The ORDER BY clause in SQL is a powerful tool used to sort the results of a query in either ascending or descending order, based on one or more columns. Understanding how to use ORDER BY effectively is crucial for organizing data in a meaningful way.</p> Text Only<pre><code># ORDER BY\n\nThis will determine how the results are sorted. To sort the results by a single column, you simply specify that column in the ORDER BY clause.\n\nSELECT column1, column2 FROM table_name ORDER BY column1 DESC, column2 DESC;\n\nExample:\nSELECT name, age FROM users ORDER BY age DESC;\n\nIn the example above the results will be selected in descending order.\nASC: Specifies an ascending order (default).\nDESC: Specifies a descending order.\n\nMultiple Column Sorting\nYou can also sort by more than one column. The sorting is performed on the first column, and then within each group of the first column, sorting is done based on the second column, and so on.\nExample:\nSELECT name, age, city FROM users ORDER BY city ASC, age DESC;\n\nThis query first sorts users by city in ascending order. Within each city, users are sorted by age in descending order.\n</code></pre>"},{"location":"9%20DATABASES/9.4%20%20SQL/#section-3-sum","title":"SECTION 3 | SUM","text":"<p>The SUM function in SQL is an aggregate function that is used to calculate the total sum of a numeric column in a database table. It's a powerful tool for data analysis, especially when you need to add up values from a large dataset</p> Text Only<pre><code># SUM\n\nBasic use of the SUM method\n\nSELECT SUM (column_name) FROM table_name WHERE condition;\n\nExample\nSELECT SUM (salary) FROM employees WHERE department = 'Sales';\n\nThis query calculates the total sum of salaries for all employees in the Sales department.\n</code></pre>"},{"location":"9%20DATABASES/9.4%20%20SQL/#section-4-count","title":"SECTION 4 | COUNT","text":"<p>The COUNT function in SQL is an essential aggregate function used to count the number of rows in a database table that match a specified condition. It's widely used in data analysis and reporting, as it helps in understanding the volume or frequency of data in a database.</p> Text Only<pre><code># COUNT\n\nBasic use of the SUM method\n\nSELECT COUNT (column_name or expression or *) FROM table_name WHERE condition;\n\nExample\nSELECT COUNT(*) FROM orders WHERE status = 'Shipped';\n\nThis query counts the number of orders with the status 'Shipped'.\n</code></pre> Text Only<pre><code># ADVANCED COUNT\n\nCOUNT with DISTINCT\n\nCOUNT(DISTINCT column_name) counts the number of unique non-NULL values in a column.\n\nExample:\nSELECT COUNT(DISTINCT customer_id) FROM orders;\nThis counts the number of unique customers who have placed orders.\n\nCombining with GROUP BY\nSELECT department, COUNT(*) FROM employees GROUP BY department;\nThis query counts the number of employees in each department.\n</code></pre> <p>Practical Considerations</p> <ul> <li>Performance | On large tables, counting rows can be resource-intensive, especially with COUNT(*). Proper indexing can improve performance.</li> <li>Use in Subqueries | COUNT can be used in subqueries for more complex queries, such as finding the number of items in a category that exceed a certain threshold.</li> <li>Data Type of Result | The result of a COUNT function is an integer. It's important to consider this when using the result in further calculations or comparisons.</li> </ul> <p>The COUNT function is a fundamental tool in SQL for data analysis. It provides a simple yet powerful way to quantify the number of records in a database that meet certain criteria. Whether used alone or in combination with other SQL functions and clauses, COUNT offers valuable insights into the data, aiding in effective decision-making and reporting.</p> <p></p> EmployeeID Name Department Salary JoinDate 1 JohnDoe Engineering 70000 2020-01-10 2 Jane Doe Marketing 50000 2019-06-23 3 Jim Beam Engineering 80000 2021-03-15 4 Jack Ray Sales 45000 2022-07-01 5 Jill May Marketing 55000 2021-11-09 <p>1: What does the following SQL query return?</p> <p>SELECT COUNT(*) FROM Employees;</p> <p>a) The total number of employees in each department.</p> <p>b) The total number of employees in the Employees table.</p> <p>c) The sum of salaries of all employees.</p> <p>d) The average salary of employees.</p> <p>2: What will be the output of the following query?</p> <p>SELECT Department, SUM(Salary) FROM Employees GROUP BY Department;</p> <p>3: Which employees' names will be listed in the result?</p> <p>SELECT Name FROM Employees WHERE Salary &gt; 60000 ORDER BY JoinDate DESC;</p> <p>4: What will the following query return?</p> <p>SELECT MAX(Salary) FROM Employees WHERE Department = 'Engineering';</p> <p>a) The highest salary in the entire Employees table.</p> <p>b) The names of employees in the Engineering department.</p> <p>c) The highest salary in the Engineering department.</p> <p>d) The total number of employees in the Engineering department.</p> <p>5: Who will be listed in the output and what will their salary be?</p> <p>\u200bSELECT Name, Salary FROM Employees ORDER BY Salary ASC LIMIT 1;</p> <p>6: What does this SQL statement produce?</p> <p>SELECT COUNT(DISTINCT Department) FROM Employees;</p> <p>a) The total number of departments.</p> <p>b) The total number of employees.</p> <p>c) The average salary across all departments.</p> <p>d) The total salary paid in each department.</p> <p>7: Which employees' records will be included in the output?</p> <p>SELECT * FROM Employees WHERE JoinDate BETWEEN '2020-01-01' AND '2021-12-31';</p> <p>8: How will the departments and their average salaries be displayed?</p> <p>SELECT Department, AVG(Salary) FROM Employees GROUP BY Department;</p> <p>9: Which employee names will appear in the result?</p> <p>SELECT Name FROM Employees WHERE Department = 'Sales' AND Salary &gt; 40000;</p> <p>10: What does the following query return?</p> <p>SELECT Name, JoinDate FROM Employees WHERE Name LIKE 'J%';</p> <p>a) The names and join dates of all employees.</p> <p>b) The names and join dates of employees whose names start with 'J'.</p> <p>c) The names and departments of employees whose names start with 'J'.</p> <p>d) The total number of employees whose names start with 'J'.</p>"}]}